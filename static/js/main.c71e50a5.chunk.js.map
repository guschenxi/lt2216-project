{"version":3,"sources":["chartparser.js","runparser.js","grammars/departure.ts","grammars/stationName.ts","dmDeparture.ts","index.tsx","srgs.js"],"names":["LOG","str","clone","obj","temp","constructor","key","isEmpty","ob","i","hasOwnProperty","Chart","numberOfWords","this","passives","Array","actives","add","edge","subchart","cat","isPassive","start","lhs","end","next","content","resultsForRule","results","finalEdges","push","out","allEdges","allPassiveEdges","concat","allActiveEdges","edges","j","k","statistics","length","nrEdges","nrPassiveEdges","nrActiveEdges","PassiveEdge","_string","toString","ActiveEdge","rest","rules","text","parse","words","grammar","root","filter","$root","chart","agenda","leftCornerFilter","addToChart","inference","rhs","slice","SRGS","min","max","oneof","eval","undefined","ruleref","position","leftCorners","pop","active","join","ref","passive","loadGrammar","dom","DOMParser","parseFromString","ActiveXObject","doc","XML","newDocument","loadXML","url","encodeURIComponent","request","XMLHttpRequest","open","send","responseXML","parseXML","getElementsByTagName","getAttribute","xrules","r","xrule","processRuleExpansions","xitems","childNodes","rule","nodeType","textContent","trim","split","nodeName","uri","repeat","parseInt","Infinity","console","log","stationName","actions","cancel","openapiconsolekey","gram","yesnogram","prs_grammar","input","result","commands","say","_context","type","value","listen","departureMachine","initial","id","states","transitions","on","CHECK","target","cond","context","from","to","date","time","order","exit","event","main_function","RECOGNISED","includes","recResult","assign","replace","startover","entry","ENDSPEECH","output_text","stop","welcome","prompt","overall","ask","confirm","yesnoanswer","choose","always","nomatch","final","check","invoke","src","tvRequest","currentdate","Date","getHours","getMinutes","getFullYear","getMonth","getDate","DateTime","LteDateTime","asc_desc","createText","onDone","data","RESPONSE","RESULT","onError","error","success","TrainAnnouncement","adTime","AdvertisedTimeAtLocation","trainNo","AdvertisedTrainIdent","track","TrackAtLocation","begin","LocationSignature","ToLocation","LocationName","departureTime","createReport","failure","read_no_result","read_result","toLowerCase","do_next","more_info","begintime","finaltime","stations","Object","entries","createMoreReport","st_message","TrainMessage","Number","ExternalDescription","create_St_message","fetch","Request","method","body","then","json","inspect","iframe","machine","Machine","count","dm","init","CLICK","dmDeparture","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","lang","recStop","ttsStart","effect","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM","Grammar","VOID","OneOf","NULL","GARBAGE","$check","checkSequenceExpansion","err","throwRuleError","Ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","sequence","RepeatClass","message","TypeError","String","checkExpansion","prototype"],"mappings":"gKAAA,wIA4BA,SAASA,IAAIC,IASb,SAASC,MAAMC,GACb,GAAW,MAAPA,GAA8B,iBAARA,EACxB,OAAOA,EAET,IAAIC,EAAO,IAAID,EAAIE,YACnB,IAAK,IAAIC,KAAOH,EACdC,EAAKE,GAAOJ,MAAMC,EAAIG,IAExB,OAAOF,EAIT,SAASG,QAAQC,GACd,IAAK,IAAIC,KAAKD,EAAM,GAAGA,EAAGE,eAAeD,GAAK,OAAO,EACtD,OAAO,EAMT,SAASE,MAAMC,GACbC,KAAKD,cAAgBA,EACrBC,KAAKC,SAAW,IAAIC,MAAMH,GAC1BC,KAAKG,QAAU,IAAID,MAAMH,GACzB,IAAK,IAAIH,EAAI,EAAGA,GAAKG,EAAeH,IAClCI,KAAKC,SAASL,GAAK,GACnBI,KAAKG,QAAQP,GAAK,GAMpBI,KAAKI,IAAM,SAAaC,GACtB,IAAIC,EAAUC,EAWd,OAVIF,EAAKG,WACPF,EAAWN,KAAKC,SAASI,EAAKI,OAC9BF,EAAMF,EAAKK,MAEXJ,EAAWN,KAAKG,QAAQE,EAAKM,KAC7BJ,EAAMF,EAAKO,KAAKC,SAEZN,KAAOD,IACXA,EAASC,GAAO,MAEdF,KAAQC,EAASC,MAGnBD,EAASC,GAAKF,GAAQA,GACf,IAOXL,KAAKc,eAAiB,SAAwBJ,EAAKD,EAAOE,GACxDF,EAAQA,GAAS,EACjBE,EAAMA,GAAOZ,EACb,IAAIgB,EAAU,GACVC,EAAahB,KAAKC,SAASQ,GAAOC,GACtC,IAAK,IAAId,KAAKoB,EACRA,EAAWpB,GAAGe,KAAOA,GAC9BI,EAAQE,KAAKD,EAAWpB,GAAGsB,KAGxB,OAAOH,GAKTf,KAAKmB,SAAW,WACd,OAAOnB,KAAKoB,kBAAkBC,OAAOrB,KAAKsB,mBAE5CtB,KAAKoB,gBAAkB,WACrB,IAAIG,EAAQ,GACZ,IAAK,IAAI3B,KAAKI,KAAKC,SACjB,IAAK,IAAIuB,KAAKxB,KAAKC,SAASL,GACjC,IAAK,IAAI6B,KAAKzB,KAAKC,SAASL,GAAG4B,GAC7BD,EAAMN,KAAKjB,KAAKC,SAASL,GAAG4B,GAAGC,IAC9B,OAAOF,GAETvB,KAAKsB,eAAiB,WACpB,IAAIC,EAAQ,GACZ,IAAK,IAAI3B,KAAKI,KAAKG,QACjB,IAAK,IAAIqB,KAAKxB,KAAKG,QAAQP,GAChC,IAAK,IAAI6B,KAAKzB,KAAKG,QAAQP,GAAG4B,GAC5BD,EAAMN,KAAKjB,KAAKG,QAAQP,GAAG4B,GAAGC,IAC7B,OAAOF,GAKTvB,KAAK0B,WAAa,WAChB,IAAIzB,EAAWD,KAAKoB,kBAAkBO,OAClCxB,EAAUH,KAAKsB,iBAAiBK,OACpC,MAAO,CAACC,QAAS3B,EAASE,EAAS0B,eAAgB5B,EAAU6B,cAAe3B,IAQhF,SAAS4B,YAAYtB,EAAOE,EAAKD,EAAKQ,GACpClB,KAAKS,MAAQA,EACbT,KAAKW,IAAMA,EACXX,KAAKU,IAAMA,EACXV,KAAKkB,IAAMA,EACXlB,KAAKQ,WAAY,EAEjB,IAAIpB,EAAM,IAAMqB,EAAQ,IAAME,EAAM,MAAQD,EAAM,OAASQ,EAC3DlB,KAAKgC,QAAU5C,EACfY,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAGnD,SAASE,WAAWzB,EAAOE,EAAKD,EAAKE,EAAMuB,EAAMjB,EAAKkB,EAAOC,GAC3DrC,KAAKS,MAAQA,EACbT,KAAKW,IAAMA,EACXX,KAAKU,IAAMA,EACXV,KAAKY,KAAOA,EACZZ,KAAKmC,KAAOA,EACZnC,KAAKkB,IAAMA,EACXlB,KAAKoC,MAAQA,EACbpC,KAAKqC,KAAOA,EACZrC,KAAKQ,WAAY,EAEjB,IAAIpB,EAAM,IAAMqB,EAAQ,IAAME,EAAM,MAAQD,EAAM,OAASE,EACzD,KAAOuB,EAAO,OAASjB,EAAM,OAASkB,EACxCpC,KAAKgC,QAAU5C,EACfY,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAc5C,SAASM,MAAMC,MAAOC,QAASC,KAAMC,QACrCD,OACHA,KAAOD,QAAQG,OAEjB,IAAIC,MAAQ,IAAI9C,MAAMyC,MAAMZ,QACxBkB,OAAS,GAETC,iBAWJ,SAASC,WAAWC,UAAWvC,MAAOE,IAAKD,IAAKuC,IAAK/B,IAAKkB,MAAOC,MAC/D,IAAIhC,KACJ,GAAI4C,IAAItB,OAAS,EAAG,CAClB,IAAIf,KAAOqC,IAAI,GACXd,KAAOc,IAAIC,MAAM,GACrB,OAAQtC,KAAKpB,aAEb,KAAKU,MAGV,YADA6C,WAAWC,UAAU,YAAavC,MAAOE,IAAKD,IAAKE,KAAKS,OAAOc,MAAOjB,IAAKkB,MAAOC,MAG7E,KAAKc,qCAEV,IAAIC,IAAMxC,KAAKwC,IACXC,IAAMzC,KAAKyC,IAMf,GAJID,KAAO,GACTL,WAAWC,UAAU,QAASvC,MAAOE,IAAKD,IAAKyB,KAAMjB,IAAKkB,MAAOC,MAG/DgB,IAAM,EAAG,CACX,IAAIxC,QAAUD,KAAKC,QACfoC,IAAY,GAALI,IAAS,CAACxC,SAAW,CAACA,QAASsC,qCAAYC,IAAMA,IAAI,EAAIA,IAAKC,IAAI,EAAGxC,UAChFkC,WAAWC,UAAU,UAAWvC,MAAOE,IAAKD,IAAKuC,IAAI5B,OAAOc,MAAOjB,IAAKkB,MAAOC,MAEjF,OAEK,KAAKc,qCAEV,IAAIG,MAAQ1C,KAAKC,QACjB,IAAK,IAAIjB,KAAK0D,MAAO,CACnB,IAAIL,IAAMK,MAAM1D,GAAGyB,OAAOc,MAC1BY,WAAWC,UAAU,SAAUvC,MAAOE,IAAKD,IAAKuC,IAAK/B,IAAKkB,MAAOC,MAEnE,OAEK,KAAKc,qCAMV,OAJAjC,IAAM7B,MAAM6B,KACZkB,MAAQ/C,MAAM+C,OACdmB,KAAK3C,KAAKC,cACVkC,WAAWC,UAAU,OAAQvC,MAAOE,IAAKD,IAAKyB,KAAMjB,IAAKkB,MAAOC,MAI3DhC,KAAO,IAAI6B,WAAWzB,MAAOE,IAAKD,IAAKE,KAAMuB,KAAMjB,IAAKkB,MAAOC,WAE/DhC,KAAO,IAAI0B,YAAYtB,MAAOE,IAAKD,IAAKQ,KAItC0B,MAAMxC,IAAIC,QACZlB,IAAI,KAAO6D,UAAY,KAAO3C,MAC9BwC,OAAO5B,KAAKZ,OAQhB,IAvEEyC,sBADYU,GAAVd,OACiB,WAAY,OAAO,GAEnB,SAA0Be,EAASC,GACpD,IAAIC,EAAcjB,OAAOe,GACzB,OAAOE,GAAcpB,MAAMmB,KAAaC,GAgE5CZ,WAAW,OAAQ,EAAG,EAAGN,KAAMD,QAAQC,MAAO,GAAI,GAAI,IAG/CI,OAAOlB,OAAS,GAAG,CACxB,IAAItB,KAAOwC,OAAOe,MACdnD,MAAOJ,KAAKI,MACZE,IAAON,KAAKM,IACZD,IAAOL,KAAKK,IACZE,KAAOP,KAAKO,KAGhB,GAFAzB,IAAIkB,MAEAA,KAAKG,UAAW,CAElB,IAAIL,QAAUyC,MAAMzC,QAAQM,OAAOC,KACnC,IAAK,IAAId,KAAKO,QAAS,CAC5B,IAAI0D,OAAS1D,QAAQP,GACjBwC,MAAQ/C,MAAMwE,OAAOzB,OACrBC,KAAOwB,OAAOxB,KAClBA,KAAKhC,KAAKK,KAAO6B,MAAMW,MAAMzC,MAAOE,KAAKmD,KAAK,KACvB,iBAAZzD,KAAKa,KAAmBxB,QAAQW,KAAKa,KAC5CkB,MAAM/B,KAAKK,KAAO2B,KAAKhC,KAAKK,KAEzB0B,MAAM/B,KAAKK,KAAOrB,MAAMgB,KAAKa,KAEpC6B,WAAW,UAAWc,OAAOpD,MAAOE,IAAKkD,OAAOnD,IAAKmD,OAAO1B,KAAM0B,OAAO3C,IAAKkB,MAAOC,YAG3E,GAAIzB,KAAKpB,aAAe2D,qCAAe,CAC5C,IAAIY,IAAMnD,KAAKC,QAEXZ,SAAW2C,MAAM3C,SAASU,KAAKoD,KACnC,IAAK,IAAInE,KAAKK,SAAU,CAC7B,IAAI+D,QAAU/D,SAASL,GACnBwC,MAAQ/C,MAAMgB,KAAK+B,OACnBC,KAAOhC,KAAKgC,KAChBD,MAAM4B,QAAQtD,KAAOrB,MAAM2E,QAAQ9C,KACnCmB,KAAK2B,QAAQtD,KAAOsD,QAAQ3B,KAC5BU,WAAW,UAAWtC,MAAOuD,QAAQrD,IAAKD,IAAKL,KAAK8B,KAAM9B,KAAKa,IAAKkB,MAAOC,MAGlE0B,OAAOvB,SACZM,iBAAiBiB,IAAKpD,MACxBoC,WAAW,UAAWpC,IAAKA,IAAKoD,IAAKvB,QAAQuB,KAAM,GAAI,GAAI,SAI/CnD,MAAQ2B,MAAM5B,MAEvBoC,WAAW,OAAQtC,MAAOE,IAAI,EAAGD,IAAKL,KAAK8B,KAAM9B,KAAKa,IAAKb,KAAK+B,MAAO/B,KAAKgC,MAIhF,OAAOO,Q,mJC7OF,SAASqB,EAAY7E,GAKxB,IAJA,IAAI8E,EAkDR,SAAkB7B,GACd,GAAwB,oBAAb8B,UAEP,OAAQ,IAAIA,WAAaC,gBAAgB/B,EAAM,mBAE9C,GAA4B,oBAAjBgC,cAA8B,CAE1C,IAAIC,EAAMC,IAAIC,cAEd,OADAF,EAAIG,QAAQpC,GACLiC,EAMP,IAAII,EAAM,+BAAiCC,mBAAmBtC,GAC1DuC,EAAU,IAAIC,eAGlB,OAFAD,EAAQE,KAAK,MAAOJ,GAAK,GACzBE,EAAQG,KAAK,MACNH,EAAQI,YArETC,CAAS7F,GACfqD,EAAOyB,EAAIgB,qBAAqB,WAAW,GAAGC,aAAa,QAC3D3C,EAAU,IAAIW,IAAaV,GAC3B2C,EAASlB,EAAIgB,qBAAqB,QAC9BG,EAAE,EAAGA,EAAID,EAAOzD,OAAQ0D,IAAK,CACjC,IAAIC,EAAQF,EAAOC,GAEnB7C,EADS8C,EAAMH,aAAa,OACdI,EAAsBD,GAExC,OAAO9C,EAGX,SAAS+C,EAAsBD,GAG3B,IAFA,IAAIE,EAASF,EAAMG,WACfC,EAAO,GACH9F,EAAE,EAAGA,EAAI4F,EAAO7D,OAAQ/B,IAC5B,GAA0B,GAAtB4F,EAAO5F,GAAG+F,SAAe,CACzB,IAAIvG,EAAMoG,EAAO5F,GAAGgG,YAAYC,OACrB,IAAPzG,GACAsG,EAAKzE,KAAK7B,EAAI0G,MAAM,YAErB,GAA0B,GAAtBN,EAAO5F,GAAG+F,SACjB,GAA0B,SAAtBH,EAAO5F,GAAGmG,SACVL,EAAKzE,KAAKkC,IAASqC,EAAO5F,GAAGgG,mBAC1B,GAA0B,WAAtBJ,EAAO5F,GAAGmG,SAAuB,CACxC,IAAIC,EAAMR,EAAO5F,GAAGuF,aAAa,OACjCO,EAAKzE,KAAKkC,IAAS6C,EAAI9C,MAAM,UAC1B,GAA0B,OAAtBsC,EAAO5F,GAAGmG,SACjBL,EAAKzE,KAAKkC,IAASqC,EAAO5F,GAAGgG,YAAYC,cACtC,GAA0B,UAAtBL,EAAO5F,GAAGmG,SACjBL,EAAKzE,KAAKkC,IAAWoC,EAAsBC,EAAO5F,WAC/C,GAA0B,QAAtB4F,EAAO5F,GAAGmG,SAAoB,CACrC,IAAIE,EAAST,EAAO5F,GAAGuF,aAAa,UACpC,GAAKc,EAEE,CACH,IAAIZ,EAAIY,EAAOH,MAAM,KACjB1C,EAAM8C,SAASb,EAAE,IACjBhC,EAAM6C,SAASb,EAAE,IACrBhC,EAAOA,GAAa8C,IACpBT,EAAKzE,KAAKkC,IAAYC,EAAKC,EAAKkC,EAAsBC,EAAO5F,WAN7D8F,EAAKzE,KAAKsE,EAAsBC,EAAO5F,UAS3CwG,QAAQC,IAAIb,EAAO5F,IAIlC,OAAO8F,E,YCxHD,MCAMY,EAAc,CAC3B,GAAO,WACP,IAAQ,SACR,GAAO,aACP,IAAQ,QACR,EAAM,WACN,QAAO,cACP,GAAO,gBACP,IAAQ,aACR,EAAM,cACN,GAAO,UACP,IAAQ,YACR,IAAQ,SACR,IAAQ,YACR,IAAQ,SACR,IAAQ,iBACR,SAAQ,aACR,SAAQ,cACR,SAAQ,aACR,GAAO,WClBCvB,EAAiBwB,IAAjBxB,KAAMyB,EAAWD,IAAXC,OAORC,EAAoB,mCAEpBC,EAAOzC,EFVO,mliBEWd0C,EAAY1C,EFkTO,83BEhTzB,SAAS2C,EAAYC,EAAerE,GAElC,IACIsE,EADMxE,YAAMuE,EAAMf,MAAM,OAAQtD,GACnB1B,eAAe4F,EAAK/D,OAIrC,YAHgBa,IAAZsD,EAAO,KACRA,EAAO,CAAC,CAAC,QAAU,aACtBV,QAAQC,IAAIS,GACLA,EAAO,GAGhB,MAAMC,EAAS,CAAC,OAAO,aAAa,OAAO,WAE3C,SAASC,EAAI3E,GACT,OAAO0C,GAAMkC,IAAD,CAA6BC,KAAM,QAASC,MAAO9E,MAGnE,SAAS+E,IACL,MAAO,CAACrC,EAAK,WAIV,MAAMsC,EACb,CACIC,QAAS,gBACTC,GAAI,mBACJL,KAAM,WACNM,OAAQ,CACPC,YAAa,CACTF,GAAI,WACJG,GAAI,CACHC,MAAO,CACG,CAAEC,OAAQ,gBAAiBC,KAAOC,QAA6BtE,IAAjBsE,EAAQC,WAC1BvE,IAAfsE,EAAQE,SAAqCxE,IAAjBsE,EAAQG,WACnBzE,IAAjBsE,EAAQI,WAAwC1E,IAAlBsE,EAAQK,OACnD,CAAEP,OAAQ,aAAcC,KAAOC,QAA6BtE,IAAjBsE,EAAQC,MAC5D,CAAEH,OAAQ,WAAYC,KAAOC,QAA2BtE,IAAfsE,EAAQE,IACjD,CAAEJ,OAAQ,aAAcC,KAAOC,QAA6BtE,IAAjBsE,EAAQI,MAC1C,CAAEN,OAAQ,aAAcC,KAAOC,QAA6BtE,IAAjBsE,EAAQG,MAC5D,CAAEL,OAAQ,cACRC,KAAOC,QAA6BtE,IAAjBsE,EAAQC,WAAqCvE,IAAfsE,EAAQE,SACtBxE,IAAjBsE,EAAQI,WAAuC1E,IAAjBsE,EAAQG,WACpBzE,IAAlBsE,EAAQK,SAI9BC,KAAO,CAAC,CAACN,EAASO,IAAUjC,QAAQC,IAAIyB,GAAUtB,EAAO,WAG1D8B,cAAe,CACXhB,QAAS,UACTC,GAAI,OACJG,GAAI,CACAa,WAAY,CACT,CAAEX,OAAQ,QAASC,KAAOC,GAAY,CAAC,QAAS,OAAQ,SAASU,SAASV,EAAQW,YAClF,CAAEb,OAAQ,aAAcC,KAAOC,GAAY,CAAC,aAAc,cAAY,2BAA4B,wBAAwBU,SAASV,EAAQW,YAEzJ,CAAElC,QAAS,CACOmC,aAAQZ,IAAqB,CAAEC,KAAM,SAAWnB,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAASE,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAAMqB,KAAOD,EAAQC,SAClLW,aAAQZ,IAAqB,CAAEE,GAAI,OAASpB,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAASE,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAAMsB,GAAKF,EAAQE,OAC5KU,aAAQZ,IAAqB,CAAEK,MAAO,UAAYvB,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAASE,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAAMyB,MAAQL,EAAQK,UACrLO,aAAQZ,IAAqB,CAAEI,KAAM,SAAWtB,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAASE,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAAMwB,KAAOJ,EAAQI,SAClLQ,aAAQZ,IAAqB,CAAEG,KAAM,SAAWrB,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAASE,EAAYkB,EAAQW,UAAUE,QAAQ,IAAI,OAAQjC,GAAMuB,KAAOH,EAAQG,SAChMlD,EAAK,aAKFyC,OAAO,CACNoB,UAAW,CACJC,MAAO9D,GAAMkC,IAAD,CAA6BC,KAAM,QAASC,MAAO,wBAC/DO,GAAI,CAAEoB,UAAW,qBACjBV,KAAM,CAACM,aAAQZ,IAAqB,CAAEC,UAAMvE,EAAWwE,QAAIxE,EAAW0E,UAAM1E,EAAWyE,UAAMzE,EAAW2E,WAAO3E,EAAWsD,YAAQtD,EAAWuF,iBAAavF,EAAWiF,eAAWjF,MAAgBgD,EAAO,eAG3MwC,KAAM,CACFH,MAAO7B,EAAI,oCACXU,GAAI,CAAEoB,UAAW,SACjBV,KAAMM,aAAQZ,IAAqB,CAAEC,UAAMvE,EAAWwE,QAAIxE,EAAW0E,UAAM1E,EAAWyE,UAAMzE,EAAW2E,WAAO3E,EAAWsD,YAAQtD,EAAWuF,iBAAavF,EAAWiF,eAAWjF,OAGtLyF,QAAS,CACE3B,QAAS,SAEfI,GAAI,CAAEoB,UAAW,WAClBtB,OAAQ,CACJ0B,OAAQ,CAAEL,MAAO7B,EAAI,aAG7BmC,QAAS,CACL7B,QAAS,SACTE,OAAQ,CACJ0B,OAAQ,CACGL,MAAO9D,GAAM+C,IAAD,CACfZ,KAAM,QACNC,MAAM,oDAEVO,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAOzB,OAInBW,KAAM,CACFT,QAAS,SACTE,OAAQ,CACJ0B,OAAQ,CACGL,MAAO9D,GAAM+C,IAAD,CACfZ,KAAM,QACNC,MAAM,0BAEVO,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAOzB,OAInBY,GAAI,CACAV,QAAS,SACTE,OAAQ,CACJ0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QACNC,MAAM,0BAEVO,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAOzB,OAInBc,KAAM,CACFZ,QAAS,SACTE,OAAQ,CACJ0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QACNC,MAAM,yBAEVO,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAOzB,OAInBa,KAAM,CACFX,QAAS,SACTE,OAAQ,CACJ0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QACNC,MAAM,kBAEVO,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAOzB,OAInBiC,QAAS,CACL/B,QAAS,SACTI,GAAI,CACAa,WAAY,CACZ,CACIV,KAAOC,GAAY,gBAAkBlB,EAAYkB,EAAQW,UAAW9B,IAAc,IAClFJ,QACW,CAACmC,aAAQZ,IAAqB,CAAEuB,QAASzC,EAAYkB,EAAQW,UAAW9B,GAAW2C,iBAE9F1B,OAAQ,WAEZ,CAAEA,OAAQ,WAAYC,KAAOC,IAAcf,EAASyB,SAASV,EAAQW,cAEzEjB,OAAQ,CACJ0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QAENC,MAAM,iDAAD,OAAmDb,EAAYwB,EAAQC,MAAvE,eAAmFzB,EAAYwB,EAAQE,IAAvG,kBAAoHF,EAAQI,KAA5H,gBAAwIJ,EAAQG,KAAhJ,UAETP,GAAI,CAAEoB,UAAW,QAErBM,IAAK,CACDP,MAAO9D,EAAK,WAEhBwE,OAAQ,CACFC,OAAS,CACF,CAAC5B,OAAQ,cAAeC,KAAOC,IAAgC,IAApBA,EAAQuB,SACnD,CAAC9C,QAAS,CACFmC,aAAQZ,IAAqB,CAAEC,UAAMvE,MACrCkF,aAAQZ,IAAqB,CAAEE,QAAIxE,MACnCkF,aAAQZ,IAAqB,CAAEK,WAAO3E,MACtCkF,aAAQZ,IAAqB,CAAEI,UAAM1E,MACrCkF,aAAQZ,IAAqB,CAAEG,UAAMzE,OACzCoE,OAAQ,gBAAiBC,KAAOC,IAAgC,IAApBA,EAAQuB,WAGrEI,QAAS,CACLZ,MAAO7B,EAAI,4CACXU,GAAI,CAAEoB,UAAW,aAI1BY,MAAO,CACLpC,QAAS,SACPE,OAAQ,CACP0B,OAAQ,CACJL,MAAO7B,EAAI,iBACRU,GAAK,CAAEoB,UAAW,UAE/Ba,MAAO,CACHC,OAAQ,CACKrC,GAAI,YACJsC,IAAM/B,GAAYgC,EAiLlD,SAAoB/B,EAAMC,EAAIE,EAAMD,EAAME,GACtC,IAAI4B,EAAc,IAAIC,KACtB,GAAa,QAAT9B,EACIA,GAAQ,IAAM6B,EAAYE,YAAY/G,OAAO,GAAG,KAAK,IAAM6G,EAAYG,cAAchH,OAAO,GAEpG,GAAa,UAAT+E,EACIA,EAAO8B,EAAYI,cAAc,KAAK,KAAKJ,EAAYK,WAAW,IAAIlH,OAAO,GAAG,KAAK,IAAI6G,EAAYM,WAAWnH,OAAO,GAE/H,GAAa,aAAT+E,EACIA,EAAO8B,EAAYI,cAAc,KAAK,KAAKJ,EAAYK,WAAW,IAAIlH,OAAO,GAAG,KAAK,KAAK6G,EAAYM,UAAU,IAAInH,OAAO,GAEnI,IAAIoH,EAAWrC,EAAO,IAAMC,EAC5B9B,QAAQC,IAAIiE,GACZ,IAAIC,EAActC,cAElB,GAAa,QAATE,EACA,IAAIqC,EAAW,YAEXA,EAAW,MAGtB,IAAInI,EAAI,yDAEyBoE,EAFzB,mHAG2F+D,EAH3F,uMAOqDzC,EAPrD,mFAQ2DC,EAR3D,qFAS6DsC,EAT7D,qFAU6DC,EAV7D,+WAsBT,OADInE,QAAQC,IAAIhE,GACTA,EA5NqDoI,CAAW3C,EAAQC,KAAMD,EAAQE,GAAIF,EAAQI,KAAMJ,EAAQG,KAAMH,EAAQK,QACrGuC,OAAQ,CACNnE,QAAS,CAAEmC,YAAO,CAAE5B,OAAQ,CAACgB,EAASO,IAAUA,EAAMsC,KAAKC,SAASC,OAAO,MAE3EjD,OAAQ,WAEVkD,QAAS,CACPlD,OAAQ,UACRrB,QAASmC,YAAO,CAAEqC,MAAO,CAACjD,EAASO,IAAUA,EAAMsC,UAI7DK,QAAS,CACNxB,OAAQ,CACJ,CACC5B,OAAQ,uBACRC,KAAOC,GAAuD,GAA3CA,EAAQhB,OAAOmE,kBAAkBtJ,QAErD,CACC4E,QAAS,CAACmC,YAAO,CAAEK,YAAcjB,GA+PjE,SAAsBjB,GAClB,IAAIqE,EAAOrE,EAAMsE,yBACbC,EAAQvE,EAAMwE,qBAAqBnI,MAAM,GAAG,GAAG,IAAI2D,EAAMwE,qBAAqBnI,OAAO,GAAG,GAAG,IAAI2D,EAAMwE,qBAAqBnI,OAAO,GACjIoI,EAAMzE,EAAM0E,gBACZC,EAAM3E,EAAM4E,kBACZ/B,EAAM7C,EAAM6E,WAAW,GAAGC,aAC1BC,EAAcV,EAAOhI,MAAM,GAAG,IAClC,GAAW,KAAPoI,EACA,IAAIjJ,EAAI,gBAAY+I,EAAZ,kBAA6B9E,EAAYkF,GAAzC,eAAsDlF,EAAYoD,GAAlE,+BAA+FkC,EAA/F,qCAGJvJ,EAAI,gBAAY+I,EAAZ,kBAA6B9E,EAAYkF,GAAzC,eAAsDlF,EAAYoD,GAAlE,+BAA+FkC,EAA/F,wBAA4HN,EAA5H,KAGZ,OADAlF,QAAQC,IAAIhE,GACLA,EA5Q8BwJ,CAAa/D,EAAQhB,OAAOmE,kBAAkB,MAC9CvC,YAAO,CAAEnJ,KAAOuI,GAChBA,EAAQhB,OAAOmE,kBAAkB,GAAGI,wBAC7CzD,OAAQ,oBACRC,KAAOC,GAAsD,GAA1CA,EAAQhB,OAAOmE,kBAAkBtJ,UAK5DmK,QAAS,CACPjD,MAAO7B,EAAI,uDACXU,GAAI,CAAEoB,UAAW,SACjBV,KAAMM,aAAQZ,IAAqB,CAAEC,UAAMvE,EAAWwE,QAAIxE,EAAW0E,UAAM1E,EAAWyE,UAAMzE,EAAW2E,WAAO3E,EAAWsD,YAAQtD,EAAWuF,iBAAavF,SAKtKuI,eAAgB,CACTlD,MAAO,CAAC7B,EAAI,sDACZU,GAAK,CAAEoB,UAAW,SAClBV,KAAMM,aAAQZ,IAAqB,CAAEC,UAAMvE,EAAWwE,QAAIxE,EAAW0E,UAAM1E,EAAWyE,UAAMzE,EAAW2E,WAAO3E,EAAWsD,YAAQtD,EAAWuF,iBAAavF,OAG7JwI,YAAa,CACT1E,QAAS,SACTI,GAAI,CACHa,WAAY,CACZ,CAACX,OAAQ,UAAWC,KAAOC,GAAY,CAAC,kBAAgB,OAAQ,QAAS,SAAU,gBAAgBU,SAASV,EAAQW,UAAUwD,gBAC9H,CAACrE,OAAQ,aAAcC,KAAOC,GAAY,CAAC,WAAY,kBAAmB,aAAaU,SAASV,EAAQW,UAAUwD,gBAClH,CAACrE,OAAQ,cAAeC,KAAOC,GAAY,CAAC,sBAAuB,uBAAwB,eAAgB,cAAcU,SAASV,EAAQW,UAAUwD,gBACpJ,CAAC1F,QAASmC,aAAQZ,IAAqB,CAAEC,UAAMvE,EAAWwE,QAAIxE,EAAW0E,UAAM1E,EAAWyE,UAAMzE,EAAW2E,WAAO3E,EAAWsD,YAAQtD,EAAWuF,iBAAavF,MAC5JoE,OAAQ,oBACRC,KAAOC,GAAY,CAAC,iBAAe,cAAY,UAAW,cAAeU,SAASV,EAAQW,UAAUwD,gBACrG,CAAErE,OAAQ,cAGXJ,OAAQ,CACJ0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QAASC,MAAOW,EAAQiB,gBAElCrB,GAAK,CAAEoB,UAAW,YAEtBoD,QAAS,CACLrD,MAAO9D,GAAM+C,IAAD,CACRZ,KAAM,QAASC,MAAM,oFAEzBO,GAAK,CAAEoB,UAAW,QAEtBM,IAAK,CACDP,MAAO9D,EAAK,WAEhB0E,QAAS,CACRZ,MAAO7B,EAAI,iFACXU,GAAI,CAAEoB,UAAW,QAErBqD,UAAW,CACN7E,QAAS,SACPE,OAAQ,CACP0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACbZ,KAAM,QACNC,MAAO,eAGHO,GAAK,CAAEoB,UAAW,UAE/Ba,MAAO,CACHC,OAAQ,CACKrC,GAAI,YAEJsC,IAAM/B,GAAYgC,EAoI1D,SAAmBsB,EAASlD,EAAMD,GAC9B,IAAI8B,EAAc,IAAIC,KACtB,GAAa,QAAT9B,EACIA,GAAQ,IAAM6B,EAAYE,YAAY/G,OAAO,GAAG,KAAK,IAAM6G,EAAYG,cAAchH,OAAO,GAEpG,GAAa,UAAT+E,EACIA,EAAO8B,EAAYI,cAAc,KAAK,KAAKJ,EAAYK,WAAW,IAAIlH,OAAO,GAAG,KAAK,IAAI6G,EAAYM,WAAWnH,OAAO,GAE/H,GAAa,aAAT+E,EACIA,EAAO8B,EAAYI,cAAc,KAAK,KAAKJ,EAAYK,WAAW,IAAIlH,OAAO,GAAG,KAAK,KAAK6G,EAAYM,UAAU,IAAInH,OAAO,GAEnI,IAAIoH,EAAWrC,EAAO,IAAMC,EAC5B9B,QAAQC,IAAIiE,GACZ,IAAIC,EAActC,cAClB7B,QAAQC,IAAIkE,GACf,IAAIlI,EAAI,qDAEuBoE,EAFvB,wLAK4C2E,EAL5C,2HAOiDd,EAPjD,yEAQiDC,EARjD,uMAgBT,OADInE,QAAQC,IAAIhE,GACTA,EAnK6D8J,CAAUrE,EAAQvI,KAAMuI,EAAQI,KAAMJ,EAAQG,OAC1EyC,OAAQ,CACNnE,QAAS,CAAEmC,YAAO,CAAE5B,OAAQ,CAACgB,EAASO,IAAUA,EAAMsC,KAAKC,SAASC,OAAO,MAC3EjD,OAAQ,WAEVkD,QAAS,CACPlD,OAAQ,UACRrB,QAASmC,YAAO,CAAEqC,MAAO,CAACjD,EAASO,IAAUA,EAAMsC,UAI7DK,QAAS,CACNxB,OAAQ,CACJ,CACC5B,OAAQ,uBACRC,KAAOC,GAAuD,GAA3CA,EAAQhB,OAAOmE,kBAAkBtJ,QAErD,CACC4E,QAASmC,YAAO,CAAEK,YAAcjB,GAsLxE,SAA0BjB,GAQtB,IANA,IAAIuE,EAAQvE,EAAM,GAAGwE,qBAAqBnI,MAAM,GAAG,GAAG,IAAI2D,EAAM,GAAGwE,qBAAqBnI,OAAO,GAAG,GAAG,IAAI2D,EAAM,GAAGwE,qBAAqBnI,OAAO,GAC1IsI,EAAM3E,EAAM,GAAG4E,kBACfW,EAAUvF,EAAM,GAAGsE,yBAAyBjI,MAAM,GAAG,IACrDwG,EAAM7C,EAAMA,EAAMlF,OAAS,GAAG8J,kBAC9BY,EAAUxF,EAAMA,EAAMlF,OAAS,GAAGwJ,yBAAyBjI,MAAM,GAAG,IACpEoJ,EAAS,GACb,MAA2BC,OAAOC,QAAQ3F,GAA1C,eAAkD,CAAC,MAAD,sBAAtCpH,EAAsC,KAAjC0H,EAAiC,KAErC,GAAP1H,IACAA,EAAM,GAAK,GACXA,GAAOoH,EAAMlF,OAAO,IACxB2K,EAAWA,EAAW,KAAOhG,EAAYa,EAAMsE,qBAMjD,MAJS,mBAAD,OACIL,EADJ,iCACoC9E,EAAYkF,GADhD,eAC6DY,EAD7D,wBACsFE,EADtF,wCAEgBhG,EAAYoD,GAF5B,eAEyC2C,EAFzC,WApMqCI,CAAiB3E,EAAQhB,OAAOmE,qBACzCrD,OAAQ,oBACRC,KAAOC,GAAsD,GAA1CA,EAAQhB,OAAOmE,kBAAkBtJ,UAK5DmK,QAAS,CACPjD,MAAO7B,EAAI,uDACXU,GAAI,CAAEoB,UAAW,YAI9B4D,WAAY,CACPpF,QAAS,SACPE,OAAQ,CACP0B,OAAQ,CACJL,MAAO9D,GAAM+C,IAAD,CACbZ,KAAM,QACNC,MAAO,0CAEHO,GAAK,CAAEoB,UAAW,UAE/Ba,MAAO,CACHC,OAAQ,CACKrC,GAAI,YAEJsC,IAAM/B,GAAYgC,EAyH1D,SAAoB2B,GACpBrF,QAAQC,IAAIoF,GACX,IAAIpJ,EAAI,qDAEuBoE,EAFvB,wJAK8CgF,EAL9C,+GAWT,OADIrF,QAAQC,IAAIhE,GACTA,EAtI6DqK,CAAW5E,EAAQC,OAC/C2C,OAAQ,CACNnE,QAAS,CAAEmC,YAAO,CAAE5B,OAAQ,CAACgB,EAASO,IAAUA,EAAMsC,KAAKC,SAASC,OAAO,MAC3EjD,OAAQ,WAEVkD,QAAS,CACPlD,OAAQ,UACRrB,QAASmC,YAAO,CAAEqC,MAAO,CAACjD,EAASO,IAAUA,EAAMsC,UAI7DK,QAAS,CACNxB,OAAQ,CACJ,CACC5B,OAAQ,uBACRC,KAAOC,GAAkD,GAAtCA,EAAQhB,OAAO6F,aAAahL,QAEhD,CACC4E,QAASmC,YAAO,CAAEK,YAAcjB,GA8JxE,SAA2BjB,EAAOkB,GAE9B,IADA,IAAI1F,EAAK,qBAAD,OAAsBiE,EAAYyB,GAAlC,gBACR,MAA2BwE,OAAOC,QAAQ3F,GAA1C,eAAkD,CAAC,MAAD,sBAAtCpH,EAAsC,KAAjC0H,EAAiC,KAC9C9E,GAAW,aAASuK,OAAOnN,GAAK,EAArB,aAA2B0H,EAAM0F,oBAAoB3J,MAAM,EAAE,IAA7D,OAGf,OADAkD,QAAQC,IAAIhE,GACLA,EAnKsCyK,CAAkBhF,EAAQhB,OAAO6F,aAAc7E,EAAQC,QAChEH,OAAQ,oBACRC,KAAOC,GAAiD,GAArCA,EAAQhB,OAAO6F,aAAahL,UAKvDmK,QAAS,CACPjD,MAAO7B,EAAI,uDACXU,GAAI,CAAEoB,UAAW,kBA8JnD,MAEMgB,EAAazH,GACf0K,MAAM,IAAIC,QAFE,sDAE0B,CAClCC,OAAQ,OAERC,KAAM7K,KAEL8K,MAAKxC,GAAQA,EAAKyC,S,oBCviB3BC,YAAQ,CACJ3I,IAAK,iCACL4I,QAAQ,IAcZ,MAAMC,EAAUC,YAAmC,CAC/CjG,GAAI,OACJL,KAAM,WACNY,QAAS,CAAC2F,MAAQ,GAClBjG,OAAQ,CACJkG,GAAI,CACFpG,QAAS,OACTC,GAAI,KACJC,OAAO,CAEHmG,KAAM,CAACjG,GAAI,CAACkG,MAAO,gBACnBC,YAAY,eAAKxG,KAKvByG,OAAQ,CACJxG,QAAS,OACTE,OAAQ,CACJuG,KAAM,CACFrG,GAAI,CACAsG,OAAQ,cACRC,MAAO,CACHrG,OAAQ,WACRrB,QAASmC,aAAO,CAACzB,EAAUoB,KAAmB,CAAE6F,UAAW7F,EAAMlB,aAI7EgH,YAAa,CACTtF,MAAO,WACPT,KAAM,UACNV,GAAI,CACA0G,UAAW,CACP7H,QAAS,CAAC,eACNmC,aAAO,CAACzB,EAAUoB,KAAmB,CAAEI,UAAWJ,EAAMlB,WAC5DS,OAAQ,UAEZW,WAAY,CACRhC,QAASmC,aAAQZ,IAAqB,CAAE2F,MAAO,MAC/C7F,OAAO,SAIfJ,OAAQ,CACJ6G,MAAO,CACHxF,MAAO9D,YAAK,iBAIxBuJ,SAAU,CACNzF,MAAO,WACPnB,GAAI,CACAoB,UAAW,aAO/B,CACIvC,QAAS,CACLgI,aAAezG,IAEX1B,QAAQC,IAAI,WAAayB,EAAQW,YAErC+F,KAAM,KACFpI,QAAQC,IAAI,SAEhBoI,UAAY3G,IAER1B,QAAQC,IAAI,kBAAoByB,EAAQ4G,QAAQC,OAAOC,UAUjEC,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,gBAC/B,OACI,gDAAQ5G,KAAK,SAAS+H,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,aAC/B,OACI,gDAAQ5G,KAAK,SAAS+H,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQ5H,KAAK,SAAS+H,UAAU,iBAAoBH,GAApD,+BAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHvK,EAAK,gBAFLwK,EADG,EACHA,MAAO/I,EADJ,EACIA,OADJ,KACY8H,SAKakB,+BAAqB,CACrDC,SAAW3I,IACP/B,EAAK,CAAEmC,KAAM,YAAaC,MAAOL,QAFjCM,EANG,EAMHA,OAAmB4B,GANhB,EAMK0G,UANL,EAMgB1G,MANhB,EAWsB2G,YAAWpC,EAAS,CACjDqC,UAAU,EACVrJ,QAAS,CACLsJ,SAAUC,aAAS,KACf1J,QAAQC,IAAI,6BACZe,EAAO,CACH2I,gBAAgB,EAChBC,YAAY,EACZC,KAAM,aAGdC,QAASJ,aAAS,KACd1J,QAAQC,IAAI,wBACZ2C,OAGJmH,SAAUL,aAAS,CAAChI,EAASsI,KACzBhK,QAAQC,IAAI,eACZkJ,EAAM,CAAElN,KAAMyF,EAAQoG,UAAW+B,KAAM,aAO3CI,UAAWP,aAAS,CAAChI,EAASsI,KAC1BhK,QAAQC,IAAI,eACZG,UAtCD,mBAWJ8J,EAXI,KAWKvL,EAXL,UAgDX,OACI,qBAAKkK,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAOuB,EAASC,QAAS,IAAMxL,EAAK,aAMhE,MAAMyL,EAAcC,SAASC,eAAe,QAC5CC,SACI,cAACvB,EAAD,IACAoB,I,+BCrKG,SAASI,EAAQnO,GACtBzC,KAAK2C,MAAQF,EAEbzC,KAAK6Q,KAAO,CAACC,EAAM,KACnB9Q,KAAK+Q,KAAO,GACZ/Q,KAAKgR,QAAU,GAEfhR,KAAKiR,OAAS,WACZ,IAAK,IAAIrR,KAAKI,KACZ,GAAU,UAANJ,GAAuB,WAANA,EAC1B,IACEsR,EAAuBlR,KAAKJ,IAC5B,MAAMuR,GACNC,EAAe,+BAAiCxR,EAAI,IAAKuR,KAwBrD,SAASE,EAAItN,GAClB,OAAO,IAAIuN,EAASvN,GAGf,SAASwN,EAAIC,GAClB,OAAO,IAAIC,EAASD,GAGf,SAASV,EAAMY,GACpB,OAAO,IAAIC,EAAWD,GAGjB,SAASE,EAAOxO,EAAKC,EAAKwO,GAC/B,OAAO,IAAIC,EAAY1O,EAAKC,EAAKwO,GAU5B,SAASP,EAAS7N,GACvBzD,KAAKa,QAAU4C,EACfzD,KAAKgC,QAAU,IAAMyB,EACrBzD,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAG5C,SAASyP,EAASD,GACvBxR,KAAKa,QAAU2Q,EACfxR,KAAKgC,QAAU,IAAMwP,EAAM,IAC3BxR,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAG5C,SAAS2P,EAAWD,GACzB1R,KAAKa,QAAU6Q,EACf1R,KAAKgC,QAAU,IAAM0P,EAAa5N,KAAK,KAAO,IAC9C9D,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAG5C,SAAS8P,EAAY1O,EAAKC,EAAKwO,GACpC7R,KAAKoD,IAAMA,EACXpD,KAAKqD,IAAMA,EACXrD,KAAKa,QAAUgR,EACf7R,KAAKgC,QAAUhC,KAAKa,QAAU,IAAMb,KAAKoD,IAAM,KAAOpD,KAAKqD,KAAK8C,IAAW,GAAKnG,KAAKqD,KAAO,IAC5FrD,KAAKiC,SAAW,WAAqB,OAAOjC,KAAKgC,SAM5C,SAASoP,EAAeW,EAAShH,GACtC,WAAavH,GAATuH,EACIiH,UAAUD,GAEVC,UAAUD,EAAU,KAAOhH,EAAMgH,SAIpC,SAASb,EAAuBW,GACrC,IAIE,IAAK,IAAIjS,KAHLiS,EAASrS,cAAgBU,OAC3BkR,EAAe,yBAA2BS,EAASrS,YAAYoP,MAEnDiD,EACRA,EAASjS,GAAGJ,aAAeU,MACpCgR,EAAuBW,EAASjS,IAChBiS,EAASjS,GAAGJ,aAAeyS,QAC3CJ,EAASjS,GAAGsS,iBAGT,MAAMf,GACNC,EAAe,mCAAoCD,IAtIvD,kTA0IAG,EAASa,UAAUD,eAAiB,WAC9BlS,KAAKa,QAAQrB,cAAgByS,QAC/Bb,EAAe,qDAAuDpR,KAAKa,QAAQrB,YAAYoP,OAInG6C,EAASU,UAAUD,eAAiB,WAC9BlS,KAAKa,QAAQrB,cAAgByS,QAC7Bb,EAAe,qDAAuDpR,KAAKa,QAAQrB,YAAYoP,OAIrG+C,EAAWQ,UAAUD,eAAiB,WACpC,IAIE,IAAK,IAAItS,KAHLI,KAAKa,QAAQrB,cAAgBU,OAC/BkR,EAAe,yBAA2BpR,KAAKa,QAAQrB,YAAYoP,MAEvD5O,KAAKa,QACjBqQ,EAAuBlR,KAAKa,QAAQjB,IAEtC,MAAMuR,GACNC,EAAe,8BAA+BD,KAIlDW,EAAYK,UAAUD,eAAiB,WACrC,IACMlS,KAAKoD,IAAI5D,cAAgBoN,QAAU5M,KAAKqD,IAAI7D,cAAgBoN,QAC9DwE,EAAe,wCAA0CpR,KAAKoD,IAAI5D,YAAYoP,KAAO,IAAM5O,KAAKqD,IAAI7D,YAAYoP,MAE5G,GAAK5O,KAAKoD,KAAOpD,KAAKoD,KAAOpD,KAAKqD,KACtC+N,EAAe,mCAAqCpR,KAAKoD,IAAM,IAAMpD,KAAKqD,KAE5E6N,EAAuBlR,KAAKa,SAC5B,MAAMsQ,GACNC,EAAe,+BAAgCD,O","file":"static/js/main.c71e50a5.chunk.js","sourcesContent":["//\n//  chartparser.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* Mods by Torbjörn\n- Removed the toString() method from Object. Why does it still work?\n- Added a text variable (similar to rules). See \n*/\n\n//////////////////////////////////////////////////////////////////////\n// a logging function\n//  - uncomment if you want to debug the parsing process\nfunction LOG(str) {\n  //console.log(\"\" + str);\n}\n\nimport * as SRGS from './srgs'\n\n//////////////////////////////////////////////////////////////////////\n// we need to be able to clone objects between different edges\n// borrowed from http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\nfunction clone(obj){\n  if (obj == null || typeof(obj) != 'object') {\n    return obj;\n  }\n  var temp = new obj.constructor(); \n  for (var key in obj) {\n    temp[key] = clone(obj[key]);\n  }\n  return temp;\n}\n\n\nfunction isEmpty(ob){\n   for (var i in ob) { if(ob.hasOwnProperty(i)) {return false;}}\n  return true;\n}\n\n//////////////////////////////////////////////////////////////////////\n// parse chart\n// conceptually this is a set of edges, but it is optimized\nfunction Chart(numberOfWords) {\n  this.numberOfWords = numberOfWords;\n  this.passives = new Array(numberOfWords);\n  this.actives = new Array(numberOfWords);\n  for (var i = 0; i <= numberOfWords; i++) {\n    this.passives[i] = {};\n    this.actives[i] = {};\n  }\n\n  // Chart.add(edge)\n  // add the edge to the chart, return true if the chart was changed \n  // (i.e. if the chart didn't already contain the edge)\n  this.add = function add(edge) {\n    var subchart, cat;\n    if (edge.isPassive) {\n      subchart = this.passives[edge.start];\n      cat = edge.lhs;\n    } else {\n      subchart = this.actives[edge.end];\n      cat = edge.next.content;\n    }\n    if (!(cat in subchart)) {\n      subchart[cat] = {};\n    }\n    if (edge in subchart[cat]) {\n      return false;\n    } else {\n      subchart[cat][edge] = edge;\n      return true;\n    }\n  }\n\n  // Chart.resultsForRule(lhs, start, end)\n  // return all parse results for the given lhs, start, and end\n  //  - start, end are optional; defaults to 0, numberOfWords\n  this.resultsForRule = function resultsForRule(lhs, start, end) {\n    start = start || 0;\n    end = end || numberOfWords;\n    var results = [];\n    var finalEdges = this.passives[start][lhs];\n    for (var i in finalEdges) {\n      if (finalEdges[i].end == end) {\n\tresults.push(finalEdges[i].out);\n      }\n    }\n    return results;\n  }\n  \n  // Chart.allEdges() / Chart.allPassiveEdges() / Chart.allActiveEdges()\n  // return an array of all (passive/active) edges in the chart\n  this.allEdges = function allEdges() {\n    return this.allPassiveEdges().concat(this.allActiveEdges());\n  }\n  this.allPassiveEdges = function allPassiveEdges() {\n    var edges = [];\n    for (var i in this.passives) \n      for (var j in this.passives[i]) \n\tfor (var k in this.passives[i][j])\n\t  edges.push(this.passives[i][j][k]);\n    return edges;\n  }\n  this.allActiveEdges = function allActiveEdges() {\n    var edges = [];\n    for (var i in this.actives) \n      for (var j in this.actives[i]) \n\tfor (var k in this.actives[i][j])\n\t  edges.push(this.actives[i][j][k]);\n    return edges;\n  }\n\n  // Chart.statistics()\n  // return the number of edges in the chart\n  this.statistics = function statistics() {\n    var passives = this.allPassiveEdges().length;\n    var actives = this.allActiveEdges().length;\n    return {nrEdges: passives+actives, nrPassiveEdges: passives, nrActiveEdges: actives};\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////\n// parse edges: passive and active\n\nfunction PassiveEdge(start, end, lhs, out) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.out = out;\n  this.isPassive = true;\n\n  var str = \"[\" + start + \"-\" + end + \"] $\" + lhs + \" := \" + out;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\nfunction ActiveEdge(start, end, lhs, next, rest, out, rules, text) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.next = next;\n  this.rest = rest;\n  this.out = out;\n  this.rules = rules;\n  this.text = text;\n  this.isPassive = false;\n\n  var str = \"<\" + start + \"-\" + end + \"> $\" + lhs + \" -> \" + next + \n    \", \" + rest + \" := \" + out + \" <- \" + rules;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\n\n//////////////////////////////////////////////////////////////////////\n// the main parsing function: a simple top-down chartparser\n//  - 'words' is an array of strings\n//  - 'grammar' is a hash table of left-hand-sides mapping to arrays of right-hand-sides\n//  - 'root' is the starting category (a string)\n//    if unspecified, use the '$root' property of the grammar\n//  - 'filter' is an optional left-corner filter \n//    (a mapping from categories/rule-refs to words)\n//    if specified, it is used when predicting new edges\n// returns the final chart\nexport function parse(words, grammar, root, filter) {\n  if (!root) {\n    root = grammar.$root;\n  }\n  var chart = new Chart(words.length);\n  var agenda = [];\n\n  var leftCornerFilter;\n  if (filter == undefined) {\n    leftCornerFilter = function() {return true};\n  } else {\n    leftCornerFilter = function leftCornerFilter(ruleref, position) {\n      var leftCorners = filter[ruleref];\n      return leftCorners ? words[position] in leftCorners : true;\n    }\n  }\n  \n  // add an edge to the chart and the agenda, if it does not already exist\n  function addToChart(inference, start, end, lhs, rhs, out, rules, text) {\n    var edge;\n    if (rhs.length > 0) {\n      var next = rhs[0];\n      var rest = rhs.slice(1);\n      switch (next.constructor) {\n\t\n      case Array:\n\t// the next symbol is a sequence\n\taddToChart(inference+\",SEQUENCE\", start, end, lhs, next.concat(rest), out, rules, text);\n\treturn;\n\t\n      case SRGS.RepeatClass:\n\t// the next symbol is a repetition\n\tvar min = next.min;\n\tvar max = next.max;\n\t// skip repeat \n\tif (min <= 0) {\n\t  addToChart(inference+\",SKIP\", start, end, lhs, rest, out, rules, text);\n\t}\n\t// repeat \n\tif (max > 0) {\n\t  var content = next.content;\n\t  var rhs = (max==1 ? [content] : [content, SRGS.Repeat(min ? min-1 : min, max-1, content)]);\n\t  addToChart(inference+\",REPEAT\", start, end, lhs, rhs.concat(rest), out, rules, text);\n\t}\n\treturn;\n\t\n      case SRGS.OneOfClass:\n\t// the next symbol is a disjunction\n\tvar oneof = next.content;\n\tfor (var i in oneof) {\n\t  var rhs = oneof[i].concat(rest);\n\t  addToChart(inference+\",ONEOF\", start, end, lhs, rhs, out, rules, text);\n\t} \n\treturn;\n\t\n      case SRGS.TagClass:\n\t// the next symbol is a semantic action\n\tout = clone(out);\n\trules = clone(rules);\n\teval(next.content);\n\taddToChart(inference+\",TAG\", start, end, lhs, rest, out, rules, text);\n\treturn;\n      }\n\n      edge = new ActiveEdge(start, end, lhs, next, rest, out, rules, text);\n    } else {\n      edge = new PassiveEdge(start, end, lhs, out);\n    }\n    \n    // try to add the edge; if successful, also add it to the agenda\n    if (chart.add(edge)) {\n      LOG(\"+ \" + inference + \": \" + edge);\n      agenda.push(edge);\n    }\n  }\n  \n  // seed the agenda with the starting rule\n  addToChart(\"INIT\", 0, 0, root, grammar[root], {}, {}, {});\n  \n  // main loop\n  while (agenda.length > 0) {\n    var edge = agenda.pop();\n    var start= edge.start;\n    var end  = edge.end;\n    var lhs  = edge.lhs;\n    var next = edge.next;\n    LOG(edge);\n\n    if (edge.isPassive) {\n      // combine\n      var actives = chart.actives[start][lhs];\n      for (var i in actives) {\n\tvar active = actives[i];\n\tvar rules = clone(active.rules);\n\tvar text = active.text;\n\ttext[edge.lhs] = words.slice(start, end).join(\" \");\n\tif (typeof edge.out == 'object' && isEmpty(edge.out)) {\n\t    rules[edge.lhs] = text[edge.lhs];\n\t} else {\n        rules[edge.lhs] = clone(edge.out);\n    }\n\taddToChart(\"COMBINE\", active.start, end, active.lhs, active.rest, active.out, rules, text);\n      }\n\n    } else if (next.constructor == SRGS.RefClass) {\n      var ref = next.content;\n      // combine\n      var passives = chart.passives[end][ref];\n      for (var i in passives) {\n\tvar passive = passives[i];\n\tvar rules = clone(edge.rules);\n\tvar text = edge.text;\n\trules[passive.lhs] = clone(passive.out);\n\ttext[passive.lhs] = passive.text;\n\taddToChart(\"COMBINE\", start, passive.end, lhs, edge.rest, edge.out, rules, text);\n      }\n      // predict\n      if (ref in grammar) {\n\tif (leftCornerFilter(ref, end)) {\n\t  addToChart(\"PREDICT\", end, end, ref, grammar[ref], {}, {}, {});\n\t}\n      }\n\n    } else if (next == words[end]) {\n      // scan\n      addToChart(\"SCAN\", start, end+1, lhs, edge.rest, edge.out, edge.rules, edge.text);\n    }\n  }\n\n  return chart;\n}\n\n\n","//\n//  runparser.js\n//\n/*\n  The author or authors of this code dedicate any and all \n  copyright interest in this code to the public domain.\n*/\n\n\n// helper functions for the parser demo\n\nimport * as SRGS from './srgs'\n\nfunction getElement(id) {\n  return document.getElementById(id);\n}\n\nfunction appendElement(parent, element, text) {\n  var elem = document.createElement(element);\n  if (text)\n    elem.appendChild(document.createTextNode(text));\n  parent.appendChild(elem);\n  return elem\n}\n\nfunction runParser(input) {\n  var resultsDiv = getElement(\"results\");\n  resultsDiv.innerHTML = \"\";\n  var maybeFilter;\n  if (getElement(\"usefilter\") && getElement(\"usefilter\").checked) {\n    maybeFilter = filter;\n    appendElement(resultsDiv, \"EM\", \"Using left-corner filter\");\n  }\n  var startTime = new Date();\n  var parseChart = parse(input, grammar, grammar.$root, maybeFilter);\n  var parseTime = new Date() - startTime;\n  var parseResults = parseChart.resultsForRule(grammar.$root);\n  \n  console.log(parseResults[0]);\n  \n  if (parseResults) {\n    for (var i in parseResults) {\n        resultsDiv.innerHTML += display(parseResults[i],\"\");\n    }\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n  \n/*\n  if (parseResults) { \n    var resultList = appendElement(resultsDiv, \"OL\");\n    for (var i in parseResults) \n      appendElement(resultList, \"LI\", JSON.stringify(parseResults[i]));\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n*/\n  var statistics = parseChart.statistics()\n  appendElement(resultsDiv, \"P\", \"Chart size: \" + statistics.nrEdges + \" edges\" +\n\t\t\" (\" + statistics.nrPassiveEdges + \" passive)\");\n  appendElement(resultsDiv, \"P\", \"Parse time: \" + parseTime + \" ms\" + \n\t\t\" (\" + (parseTime / statistics.nrEdges).toFixed(2) + \" ms/edge)\");\n}\n\nfunction runWordParser() {\n  runParser(getElement(\"input\").value.split(/\\s+/));\n}\n\nfunction runCharacterParser() {\n  runParser(getElement(\"input\").value.split(\"\"));\n}\n\nexport function loadGrammar(str) {\n    var dom = parseXML(str);\n    var root = dom.getElementsByTagName(\"grammar\")[0].getAttribute(\"root\");\n    var grammar = new SRGS.Grammar(root);\n    var xrules = dom.getElementsByTagName(\"rule\");\n    for(var r=0; r < xrules.length; r++) {\n        var xrule = xrules[r];\n        var id = xrule.getAttribute(\"id\");\n        grammar[id] = processRuleExpansions(xrule);\n    }\n    return grammar;\n}\n\nfunction processRuleExpansions(xrule) {\n    var xitems = xrule.childNodes;\n    var rule = [];\n    for(var i=0; i < xitems.length; i++) {\n        if (xitems[i].nodeType == 3) {\n            var str = xitems[i].textContent.trim();\n            if (str != \"\") {\n                rule.push(str.split(/ +/));\n            }\n        } else if (xitems[i].nodeType == 1) {\n            if (xitems[i].nodeName == \"token\") {\n                rule.push(SRGS.Tag(xitems[i].textContent));\n            } else if (xitems[i].nodeName == \"ruleref\") {\n                var uri = xitems[i].getAttribute(\"uri\");\n                rule.push(SRGS.Ref(uri.slice(1)));\n            } else if (xitems[i].nodeName == \"tag\") {\n                rule.push(SRGS.Tag(xitems[i].textContent.trim()));\n            } else if (xitems[i].nodeName == \"one-of\") {\n                rule.push(SRGS.OneOf(processRuleExpansions(xitems[i])));\n            } else if (xitems[i].nodeName == \"item\") {\n                var repeat = xitems[i].getAttribute(\"repeat\");\n                if (!repeat) {\n                    rule.push(processRuleExpansions(xitems[i]));\n                } else {\n                    var r = repeat.split(\"-\");\n                    var min = parseInt(r[0]);\n                    var max = parseInt(r[1]);\n                    max = (max) ? max : Infinity;\n                    rule.push(SRGS.Repeat(min, max, processRuleExpansions(xitems[i])));\n                }\n            } else {\n                console.log(xitems[i]);\n            }\n        }\n    }\n\treturn rule;\n}\n\nfunction parseXML(text) {\n    if (typeof DOMParser != \"undefined\") {\n        // Mozilla, Firefox, and related browsers\n        return (new DOMParser()).parseFromString(text, \"application/xml\");\n    }\n    else if (typeof ActiveXObject != \"undefined\") {\n        // Internet Explorer.\n        var doc = XML.newDocument();  // Create an empty document\n        doc.loadXML(text);            // Parse text into it\n        return doc;                   // Return it\n    }\n    else {\n        // As a last resort, try loading the document from a data: URL\n        // This is supposed to work in Safari. Thanks to Manos Batsis and\n        // his Sarissa library (sarissa.sourceforge.net) for this technique.\n        var url = \"data:text/xml;charset=utf-8,\" + encodeURIComponent(text);\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, false);\n        request.send(null);\n        return request.responseXML;\n    }\n};\n","export const grammar = `\n<grammar root=\"final\">\n   <rule id=\"final\">\n      <tag> out = new Object();  </tag>\n      <one-of>\n         <item>\n             <one-of>\n               <item><ruleref uri=\"#time\"/> <tag> out.time = rules.time; </tag></item>\n               <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n             </one-of>\n         </item>\n         <item><tag>out.order = \"asc\";</tag>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <item repeat = \"0-1\">första</item><ruleref uri=\"#trainWord\"/>\n            <item repeat=\"0-4\">\n               <one-of>\n                  <item><ruleref uri=\"#time\"/> <tag> out.time = rules.time; </tag></item>\n                  <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n                  <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n                  <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n                  <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n               </one-of>\n            </item>\n         </item>\n         <item><tag>out.order = \"asc\";</tag>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <item>nästa</item><ruleref uri=\"#trainWord\"/>\n            <tag> out.time = 'NOW'; </tag><tag> out.date = 'today'; </tag>\n            <item repeat=\"0-2\"><one-of>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n               <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n            </one-of></item>\n         </item>\n         <item>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <ruleref uri=\"#which\"/><tag> out.time = rules.which.time; out.order = rules.which.order</tag>\n            <ruleref uri=\"#trainWord\"/>\n            <item repeat=\"0-3\"><one-of>\n               <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n               <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n            </one-of></item>\n         </item>\n         \n      </one-of>\n   </rule>\n\n   <rule id=\"trainWord\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> tåg </item>\n            <item> tåget </item>\n            <item> tågen </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"verb\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> kör </item>\n            <item> går </item>\n            <item> är </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"QuestionWord\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> När </item>\n            <item> Vilken tid </item>\n            <item> Hur dags </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"which\">\n      <one-of>\n         <item><one-of><item> första </item><item> Första </item></one-of> <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item><one-of><item> sista </item><item> Sista </item></one-of><tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> det första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> det sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> den första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> den sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> de första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> de sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n      </one-of>\n   </rule>\n   <rule id=\"fromto\">\n      <item repeat=\"0-1\">från</item><ruleref uri=\"#station\"/> <tag> out.from = rules.station; </tag>\n      <item repeat=\"0-1\"><one-of><item>till</item><item>mot</item></one-of></item>\n      <ruleref uri=\"#station\"/> <tag> out.to = rules.station; </tag>\n   </rule>\n   <rule id=\"from\">\n      <item>från</item><ruleref uri=\"#station\"/> <tag> out = rules.station; </tag>\n   </rule>\n   <rule id=\"to\">\n      <one-of><item>till</item><item>mot</item></one-of>\n      <ruleref uri=\"#station\"/> <tag> out = rules.station; </tag>\n   </rule>\n\n   <rule id=\"station\">\n      <one-of>\n         <item> Emmaboda <tag> out = 'Em'; </tag></item>\n         <item> Kalmar <tag> out = 'Kac'; </tag></item>\n         <item> Karlskrona <tag> out = 'Ck'; </tag></item>\n         <item> Holmsjö <tag> out = 'Hmö'; </tag></item>\n         <item> Bergåsa <tag> out = 'Båa'; </tag></item>\n         <item> Vissefjärda <tag> out = 'Vfa'; </tag></item>\n         <item> Örsjö <tag> out = 'Örs'; </tag></item>\n         <item> Nybro <tag> out = 'Nyb'; </tag></item>\n         <item> Trekanten <tag> out = 'Tre'; </tag></item>\n         <item> Smedby <tag> out = 'Sdy'; </tag></item>\n         <item> Malmö <tag> out = 'M'; </tag></item>\n         <item> Växjö <tag> out = 'Vö'; </tag></item>\n         <item> Hässleholm <tag> out = 'Hm'; </tag></item>\n         <item> Hovmantorp <tag> out = 'Hvp'; </tag></item>\n         <item> Lessebo <tag> out = 'Lo'; </tag></item>\n         <item> Göteborg <tag> out = 'G'; </tag></item>\n         <item> Alvesta <tag> out = 'Av'; </tag></item>\n         <item> Stockholm <tag> out = 'Cst'; </tag></item>\n      </one-of>\n      <item repeat = \"0-1\">\n          <one-of>\n             <item>station</item> <item>Station</item>\n             <item>centralstation</item> <item>Centralstation</item>\n             <item>C</item> <item>c</item> <item>central</item>\n             <item>stationen</item> <item>Stationen</item>\n             <item>centralstationen</item> <item>Centralstationen</item>\n          </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"time\">\n\t   <item repeat=\"0-1\"> efter </item> <item repeat=\"0-1\"> klockan </item>\n\t   <one-of>\n\t     <item> nu <tag> out = \"NOW\"; </tag></item>\n\t     <item> now <tag> out = \"NOW\"; </tag></item>\n\t\t <item><ruleref uri=\"#hour\"/><tag>out = rules.hour+\":00\"</tag></item>\n\t\t <item><ruleref uri=\"#hour\"/>.<ruleref uri=\"#minute\"/><tag>out = rules.hour+\":\"+rules.minute;</tag></item>\n\t\t <item><ruleref uri=\"#hour\"/>och<ruleref uri=\"#minute\"/><tag>out.hour = rules.hour; out.minute = rules.minute;</tag></item>\n\t\t <item><ruleref uri=\"#minute\"/> över <ruleref uri=\"#hour\"/><tag>out = rules.hour+\":\"+rules.minute; </tag></item>\n\t\t <item><ruleref uri=\"#minute\"/> i <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour - 1)).slice(-2)+\":\"+(\"0\"+(60 - rules.minute)).slice(-2); </tag></item>\n\t\t <item> halv <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour-1)).slice(-2) +\":30\"; </tag></item>\n\t\t <item> kvart i <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour-1)).slice(-2) +\":45\"; </tag></item>\n\t\t <item> kvart över <ruleref uri=\"#hour\"/><tag>out = (\"0\"+rules.hour).slice(-2) +\":15\"; </tag></item>\n\t  </one-of>\n   </rule>\n   \n   <rule id=\"minute\">\n      <one-of>\n         <item><one-of><item>00</item><item>0</item><item>noll</item></one-of> <tag> out = '00'; </tag></item>\n         <item><one-of><item>01</item><item>1</item><item>ett</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item><item>två</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item><item>tre</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item><item>fyra</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item><item>fem</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item><item>sex</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item><item>sju</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item><item>åtta</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item><item>nio</item></one-of> <tag> out = '09'; </tag></item>\n         <item><one-of><item>10</item><item>tio</item></one-of><tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n         <item>25 <tag> out = '25'; </tag></item>\n         <item>26 <tag> out = '26'; </tag></item>\n         <item>27 <tag> out = '27'; </tag></item>\n         <item>28 <tag> out = '28'; </tag></item>\n         <item>29 <tag> out = '29'; </tag></item>\n         <item>30 <tag> out = '30'; </tag></item>\n         <item>31 <tag> out = '31'; </tag></item>\n         <item>32 <tag> out = '32'; </tag></item>\n         <item>33 <tag> out = '33'; </tag></item>\n         <item>34 <tag> out = '34'; </tag></item>\n         <item>35 <tag> out = '35'; </tag></item>\n         <item>36 <tag> out = '36'; </tag></item>\n         <item>37 <tag> out = '37'; </tag></item>\n         <item>38 <tag> out = '38'; </tag></item>\n         <item>39 <tag> out = '39'; </tag></item>\n         <item>40 <tag> out = '40'; </tag></item>\n         <item>41 <tag> out = '41'; </tag></item>\n         <item>42 <tag> out = '42'; </tag></item>\n         <item>43 <tag> out = '43'; </tag></item>\n         <item>44 <tag> out = '44'; </tag></item>\n         <item>45 <tag> out = '45'; </tag></item>\n         <item>46 <tag> out = '46'; </tag></item>\n         <item>47 <tag> out = '47'; </tag></item>\n         <item>48 <tag> out = '48'; </tag></item>\n         <item>49 <tag> out = '49'; </tag></item>\n         <item>50 <tag> out = '50'; </tag></item>\n         <item>51 <tag> out = '51'; </tag></item>\n         <item>52 <tag> out = '52'; </tag></item>\n         <item>53 <tag> out = '53'; </tag></item>\n         <item>54 <tag> out = '54'; </tag></item>\n         <item>55 <tag> out = '55'; </tag></item>\n         <item>56 <tag> out = '56'; </tag></item>\n         <item>57 <tag> out = '57'; </tag></item>\n         <item>58 <tag> out = '58'; </tag></item>\n         <item>59 <tag> out = '59'; </tag></item>\n         <item>60 <tag> out = '60'; </tag></item>\n      </one-of>\n   </rule>\n   <rule id=\"hour\">\n      <one-of>\n         <item><one-of><item>00</item><item>0</item><item>noll</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>01</item><item>1</item><item>ett</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item><item>två</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item><item>tre</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item><item>fyra</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item><item>fem</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item><item>sex</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item><item>sju</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item><item>åtta</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item><item>nio</item></one-of> <tag> out = '09'; </tag></item>\n         <item><one-of><item>10</item><item>tio</item></one-of><tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n      </one-of>\n   </rule>\n\n   <rule id=\"date\">\n         <one-of>\n            <item> idag <tag> out = 'today'; </tag></item>\n            <item> imorgon <tag> out = 'tomorrow'; </tag></item>\n            <item> today <tag> out = 'today'; </tag></item>\n            <item> tomorrow <tag> out = 'tomorrow'; </tag></item>\n            <item> \n               <item repeat=\"0-1\"> den </item><ruleref uri=\"#day\"/><ruleref uri=\"#month\"/>\n               <tag> out = '2021-'+ rules.month + '-' + rules.day ; </tag>\n            </item>\n         </one-of>\n   </rule>\n\n   <rule id=\"day\">\n      <one-of>\n         <item><one-of><item>01</item><item>1</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item></one-of> <tag> out = '09'; </tag></item>\n         <item>10 <tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n         <item>25 <tag> out = '25'; </tag></item>\n         <item>26 <tag> out = '26'; </tag></item>\n         <item>27 <tag> out = '27'; </tag></item>\n         <item>28 <tag> out = '28'; </tag></item>\n         <item>29 <tag> out = '29'; </tag></item>\n         <item>30 <tag> out = '30'; </tag></item>\n         <item>31 <tag> out = '31'; </tag></item>\n      </one-of>\n   </rule>\n\n   <rule id=\"month\">\n      <one-of>\n         <item><one-of><item>Januari</item><item>januari</item></one-of><tag> out = '01'; </tag></item>\n         <item><one-of><item>Februari</item><item>februari</item></one-of><tag> out = '02'; </tag></item>\n         <item><one-of><item>Mars</item><item>mars</item></one-of><tag> out = '03'; </tag></item>\n         <item><one-of><item>April</item><item>april</item></one-of><tag> out = '04'; </tag></item>\n         <item><one-of><item>Maj</item><item>maj</item></one-of><tag> out = '05'; </tag></item>\n         <item><one-of><item>Juni</item><item>juni</item></one-of><tag> out = '06'; </tag></item>\n         <item><one-of><item>Juli</item><item>juli</item></one-of><tag> out = '07'; </tag></item>\n         <item><one-of><item>Augusti</item><item>augusti</item></one-of><tag> out = '08'; </tag></item>\n         <item><one-of><item>September</item><item>september</item></one-of><tag> out = '09'; </tag></item>\n         <item><one-of><item>Oktober</item><item>oktober</item></one-of><tag> out = '10'; </tag></item>\n         <item><one-of><item>November</item><item>november</item></one-of><tag> out = '11'; </tag></item>\n         <item><one-of><item>December</item><item>december</item></one-of><tag> out = '12'; </tag></item>\n      </one-of>\n   </rule>\n</grammar>\n`\n\nexport const yesnogrammar = `\n<grammar root=\"final\">\n   <rule id=\"final\">\n         <tag>out = new Object();</tag>\n         <item repeat=\"1-2\">\n             <one-of>\n                <item><ruleref uri=\"#yes\"/><tag>out.yesnoanswer = rules.yes;</tag></item>\n                <item><ruleref uri=\"#no\"/><tag>out.yesnoanswer = rules.no;</tag></item>\n             </one-of>\n         </item>\n   </rule>\n   <rule id=\"yes\">\n      <tag> out = true; </tag>\n      <one-of> \n         <item> yes </item>\n         <item> ja </item>\n         <item> absolut </item>\n         <item> korrekt </item>\n         <item> jajamen </item>\n         <item> Ja visst </item>\n      </one-of>\n   </rule>\n   <rule id=\"no\">\n      <tag> out = false; </tag>\n      <one-of> \n         <item> no </item>\n         <item> nej </item>\n         <item> nix </item>\n         <item> inte </item>\n      </one-of>\n   </rule>\n</grammar>\n`\n","export const stationName = {\n\"Em\" : \"Emmaboda\",\n\"Kac\" : \"Kalmar\",\n\"Ck\" : \"Karlskrona\",\n\"Nyb\" : \"Nybro\",\n\"M\" : \"Malmö\",\n\"Vö\" : \"Växjö\",\n\"Hm\" : \"Hässleholm\",\n\"Hvp\" : \"Hovmantorp\",\n\"G\" : \"Göteborg\",\n\"Av\" : \"Alvesta\",\n\"Cst\" : \"Stockholm\",\n\"Sdy\" : \"Smedby\",\n\"Tre\" : \"Trekanten\",\n\"Sdy\" : \"Smedby\",\n\"Vfa\" : \"Vissefjärda\",\n\"Hmö\" : \"Holmsjö\",\n\"Örs\" : \"Örsjö\",\n\"Båa\" : \"Bergåsa\",\n\"Lo\" : \"Lessebo\",\n};\n","import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar, yesnogrammar } from './grammars/departure';\nimport { stationName } from './grammars/stationName';\n\n// Trafikverket API's key\nconst openapiconsolekey = \"f16eb462dbdb435a8f3c22829c0e13bf\"\n\nconst gram = loadGrammar(grammar);\nconst yesnogram = loadGrammar(yesnogrammar);\n\nfunction prs_grammar(input: string, grammar) {\n  //console.log(input);\n  var prs = parse(input.split(/\\s+/), grammar);\n  var result = prs.resultsForRule(gram.$root);\n  if (result[0]===undefined){\n     result=[{\"reserve\":\"reserve\"}]};\n  console.log(result);\n  return result[0];\n};\n\nconst commands=[\"stop\",\"start over\",\"help\",\"go back\"];\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n};\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return [send(\"LISTEN\"), //send('MAXSPEECH', {delay: 6000, id:'maxsp'}) \n           ]\n};\n\nexport const departureMachine: MachineConfig<SDSContext, any, SDSEvent> = (\n{\n    initial: 'main_function',\n    id: \"departureMachine\",\n    type: 'parallel',\n    states: {\n\t    transitions: {\n\t        id: \"function\",\n\t        on: { \n\t\t        CHECK: [\n                    { target: \"#main.overall\", cond: (context) => context.from === undefined \n                              && context.to === undefined && context.date === undefined \n                              && context.time === undefined && context.order === undefined },\n                    { target: \"#main.from\", cond: (context) => context.from === undefined },\n\t\t        \t{ target: \"#main.to\", cond: (context) => context.to === undefined },\n\t\t        \t{ target: \"#main.time\", cond: (context) => context.time === undefined },\n                    { target: \"#main.date\", cond: (context) => context.date === undefined },\n\t\t        \t{ target: \"#main.final\", \n\t\t\t          cond: (context) => context.from !== undefined && context.to !== undefined \n                            && context.time !== undefined && context.date !== undefined\n                            && context.order !== undefined\n                    }\n\t        \t    ],\n\t        },\n\t        exit : [(context, event) => console.log(context), cancel(\"check\")],\n\t    },\n\t    \n        main_function: {\n            initial: \"welcome\",\n            id: \"main\",\n            on: {\n                RECOGNISED: [\n                   { target: '.stop', cond: (context) => ['stopp', 'stop', 'sluta'].includes(context.recResult) },\n                   { target: '.startover', cond: (context) => ['start over', 'börja om', 'start from the beginning', 'start from beginning'].includes(context.recResult) },\n\n\t\t   { actions: [\n                       assign((context) => { return { from: \"from\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).from : context.from } }),\n                       assign((context) => { return { to: \"to\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).to : context.to } }),\n                       assign((context) => { return { order: \"order\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).order : context.order } }),\n                       assign((context) => { return { time: \"time\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).time : context.time } }),\n                       assign((context) => { return { date: \"date\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).date : context.date } }),\n\t\t       send(\"CHECK\")]\n                   }\n\n                 ] \n            },\n            states:{\n\t            startover: {\n                    entry: send((_context: SDSContext) => ({ type: \"SPEAK\", value: \"OK. Starting over\" })),\n                    on: { ENDSPEECH: \"#departureMachine\" },\n                    exit: [assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined, recResult: undefined } }), cancel(\"ENDSPEECH\")]\n                },\n\n                stop: {\n                    entry: say(\"OK. Going back to the root menu.\"),\n                    on: { ENDSPEECH: '#root'},\n                    exit: assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined, recResult: undefined } }),\n                },\n                \n            \twelcome: {\n                        initial: \"prompt\",\n                        \n     \t            on: { ENDSPEECH: \"overall\" },\n            \t    states: {\n            \t        prompt: { entry: say(\"Hello!\") }\n            \t    }\n            \t},\n            \toverall: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n                                entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `Provide some information about the departure.`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\"}\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tfrom: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n                                entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `from which station?`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\"}\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tto: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: ` to which station? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \ttime: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `After which time? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tdate: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `Which day? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n\t            confirm: {\n\t                initial: \"prompt\",\n\t                on: {\n            \t        RECOGNISED: [\n            \t        {\n            \t            cond: (context) => \"yesnoanswer\" in (prs_grammar(context.recResult, yesnogram) || {}),\n            \t            actions: \n                                    [assign((context) => { return { confirm: prs_grammar(context.recResult, yesnogram).yesnoanswer } }), \n                                ],\n            \t            target: \".choose\"\n            \t        },\n            \t        { target: \".nomatch\", cond: (context) => !(commands.includes(context.recResult)) }]\n            \t    },\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\", \n            \t                //value: `are you sure?`\n            \t                value: `Do you want to check when the train goes from ${stationName[context.from]} to ${stationName[context.to]} after ${context.time} for ${context.date} ?`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: send(\"LISTEN\")\n            \t        },\n            \t        choose: {\n            \t              always:  [\n            \t                     {target: '#main.final', cond: (context) => context.confirm === true },\n                    \t             {actions: [\n                                          assign((context) => { return { from: undefined } }),\n                                          assign((context) => { return { to: undefined } }),\n                                          assign((context) => { return { order: undefined } }),\n                                          assign((context) => { return { time: undefined } }),\n                                          assign((context) => { return { date: undefined } })],\n                                      target: '#main.welcome', cond: (context) => context.confirm === false }\n                    \t            ] \n                    \t},\n                    \tnomatch: {\n                    \t    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    \t    on: { ENDSPEECH: \"prompt\" }\n                    \t}\n               \t     }\t\n            \t},\n       \t        final: {\n         \t        initial: \"prompt\",\n       \t            states: {\n        \t            prompt: { \n                \t        entry: say(\"OK. Checking.\"),\n                            on : { ENDSPEECH: \"check\"} \n\t\t\t            },\n\t\t\t            check: {\n\t\t\t                invoke: {\n                                id: 'tvrequest',\n                                src: (context) => tvRequest(createText(context.from, context.to, context.time, context.date, context.order)),\n                                onDone: {\n                                  actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] }),\n                                             ], \n                                  target: 'success',\n                                },\n                                onError: {\n                                  target: 'failure',\n                                  actions: assign({ error: (context, event) => event.data })\n                                }\n                            }\n                        },\n                        success: {\n                           always: [\n                               {\n                                target: \"#main.read_no_result\",  \n                                cond: (context) => context.result.TrainAnnouncement.length == 0 \n                               },\n                               {\n                                actions: [assign({ output_text: (context) => \n                                         createReport(context.result.TrainAnnouncement[0]) }),\n                                         assign({ temp: (context) => \n                                         context.result.TrainAnnouncement[0].AdvertisedTrainIdent })],\n                                target: \"#main.read_result\", \n                                cond: (context) => context.result.TrainAnnouncement.length !=0 \n                               }\n                           ], \n          \n                        },\n                        failure: {\n                          entry: say(\"failed to fetch data from the authority. Try again.\"),\n                          on: { ENDSPEECH: \"#main\" },\n                          exit: assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined } }),\n                        },\n\t\t            }\n            \t},\n\n    \t        read_no_result: {\n                    entry: [say(\"Sorry, No related info has been found. Try again.\")],\n                    on : { ENDSPEECH: \"#main\"}, \n                    exit: assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined } }),\n                },\n\n                read_result: {\n                    initial: \"prompt\",\n                    on: {\n            \t        RECOGNISED: [\n            \t        {target: \".prompt\", cond: (context) => [\"en gång till\", \"igen\", \"again\", \"repeat\", \"listen again\"].includes(context.recResult.toLowerCase()) },\n            \t        {target: \".more_info\", cond: (context) => [\"mer info\", \"mer information\", \"more info\"].includes(context.recResult.toLowerCase())},\n            \t        {target: \".st_message\", cond: (context) => [\"stations meddelande\", \"station announcement\", \"announcement\", \"meddelande\"].includes(context.recResult.toLowerCase())},\n            \t        {actions: assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined } }), \n            \t         target: \"#departureMachine\", \n            \t         cond: (context) => [\"gå tillbaka\", \"börja om\", \"go back\", \"start over\" ].includes(context.recResult.toLowerCase())},\n            \t        { target: \".nomatch\"}\n            \t        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\", value: context.output_text \n                                })),\n                            on : { ENDSPEECH: \"do_next\"}\n                        },\n                        do_next: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\", value: `Listen again? or more train infomation? stations announcement? or start over?` \n                                })),\n                            on : { ENDSPEECH: \"ask\"}\n                        },\n                        ask: {\n                            entry: send(\"LISTEN\")\n                        },\n                        nomatch: {\n            \t            entry: say(\"Listen again? or more train infomation? stations announcement? or start over?\"),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        more_info: {\n                 \t        initial: \"prompt\",\n               \t            states: {\n                \t            prompt: { \n                        \t        entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: \"checking\", \n                                //value: `checking more info about train ${context.result.TrainAnnouncement[0].AdvertisedTrainIdent}` \n                                })),\n                                    on : { ENDSPEECH: \"check\"} \n\t\t\t                    },\n\t\t\t                    check: {\n\t\t\t                        invoke: {\n                                        id: 'tvrequest',\n                                        //src: (context) => tvRequest(more_info(context.result.TrainAnnouncement[0].AdvertisedTrainIdent, context.time, context.date)),\n                                        src: (context) => tvRequest(more_info(context.temp, context.time, context.date)),\n                                        onDone: {\n                                          actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] })], \n                                          target: 'success',\n                                        },\n                                        onError: {\n                                          target: 'failure',\n                                          actions: assign({ error: (context, event) => event.data })\n                                        }\n                                    }\n                                },\n                                success: {\n                                   always: [\n                                       {\n                                        target: \"#main.read_no_result\",  \n                                        cond: (context) => context.result.TrainAnnouncement.length == 0 \n                                       },\n                                       {\n                                        actions: assign({ output_text: (context) => \n                                                 createMoreReport(context.result.TrainAnnouncement) }),\n                                        target: \"#main.read_result\", \n                                        cond: (context) => context.result.TrainAnnouncement.length !=0 \n                                       }\n                                   ], \n                  \n                                },\n                                failure: {\n                                  entry: say(\"failed to fetch data from the authority. Try again.\"),\n                                  on: { ENDSPEECH: \"#main\" }\n                                },\n\t\t                    }            \t        \n            \t        },\n            \t        st_message: {\n                 \t        initial: \"prompt\",\n               \t            states: {\n                \t            prompt: { \n                        \t        entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: \"checking the station's announcement\", \n                                })),\n                                    on : { ENDSPEECH: \"check\"} \n\t\t\t                    },\n\t\t\t                    check: {\n\t\t\t                        invoke: {\n                                        id: 'tvrequest',\n                                        //src: (context) => tvRequest(st_message(context.result.TrainAnnouncement[0].LocationSignature)),\n                                        src: (context) => tvRequest(st_message(context.from)),\n                                        onDone: {\n                                          actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] })], \n                                          target: 'success',\n                                        },\n                                        onError: {\n                                          target: 'failure',\n                                          actions: assign({ error: (context, event) => event.data })\n                                        }\n                                    }\n                                },\n                                success: {\n                                   always: [\n                                       {\n                                        target: \"#main.read_no_result\",  \n                                        cond: (context) => context.result.TrainMessage.length == 0 \n                                       },\n                                       {\n                                        actions: assign({ output_text: (context) => \n                                                 create_St_message(context.result.TrainMessage, context.from) }),\n                                        target: \"#main.read_result\", \n                                        cond: (context) => context.result.TrainMessage.length !=0 \n                                       }\n                                   ], \n                  \n                                },\n                                failure: {\n                                  entry: say(\"failed to fetch data from the authority. Try again.\"),\n                                  on: { ENDSPEECH: \"#main\" }\n                                },\n\t\t                    }            \t        \n            \t        },\n                    },     \n                },\n\t        },\n        },\n    },\n}\n)\n\nfunction createText(from, to, time, date, order) {\n    var currentdate = new Date()\n    if (time === \"NOW\") {\n        var time = (\"0\" + currentdate.getHours()).slice(-2)+\":\"+(\"0\" + currentdate.getMinutes()).slice(-2)\n    };\n    if (date === \"today\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+currentdate.getDate()).slice(-2)\n    }\n    if (date === \"tomorrow\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+(currentdate.getDate()+1)).slice(-2)\n    }    \n    var DateTime = date + \"T\" + time;\n    console.log(DateTime)\n    var LteDateTime = date + \"T\" + \"23:59:59\"\n    // console.log(LteDateTime)\n    if (order == \"desc\") {\n        var asc_desc = \"desc\"; \n    } else {\n        var asc_desc = \"asc\"; \n      };\n    \n\tvar text = `\n\t<REQUEST>\n      <LOGIN authenticationkey=\"${openapiconsolekey}\" />\n      <QUERY objecttype=\"TrainAnnouncement\" schemaversion=\"1.3\" orderby=\"AdvertisedTimeAtLocation ${asc_desc}\" limit=\"1\">\n            <FILTER>\n                  <AND>\n                        <EQ name=\"ActivityType\" value=\"Avgang\" />\n                        <EQ name=\"LocationSignature\" value=\"${from}\" />\n                        <EQ name=\"ToLocation.LocationName\" value=\"${to}\" />\n                        <GTE name=\"AdvertisedTimeAtLocation\" value=\"${DateTime}\" />\n                        <LTE name=\"AdvertisedTimeAtLocation\" value=\"${LteDateTime}\" />\n                  </AND>\n            </FILTER>\n            <INCLUDE>AdvertisedTrainIdent</INCLUDE>\n            <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\n            <INCLUDE>TrackAtLocation</INCLUDE>\n            <INCLUDE>LocationSignature</INCLUDE>\n            <INCLUDE>ToLocation.LocationName</INCLUDE>\n            \n      </QUERY>\n    </REQUEST>`\n    console.log(text)\nreturn text;\n}\n\nfunction more_info(trainNo, time, date) {\n    var currentdate = new Date()\n    if (time === \"NOW\") {\n        var time = (\"0\" + currentdate.getHours()).slice(-2)+\":\"+(\"0\" + currentdate.getMinutes()).slice(-2)\n    };\n    if (date === \"today\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+currentdate.getDate()).slice(-2)\n    }\n    if (date === \"tomorrow\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+(currentdate.getDate()+1)).slice(-2)\n    }    \n    var DateTime = date + \"T\" + time;\n    console.log(DateTime)\n    var LteDateTime = date + \"T\" + \"23:59:59\"\n    console.log(LteDateTime)\n\tvar text = `\n<REQUEST>\n    <LOGIN authenticationkey=\"${openapiconsolekey}\"/>\n    <QUERY objecttype=\"TrainAnnouncement\" schemaversion=\"1.3\" orderby=\"AdvertisedTimeAtLocation\">\n        <FILTER>\n            <EQ name=\"AdvertisedTrainIdent\" value=\"${trainNo}\" />\n            <EQ name=\"Advertised\" value=\"true\"/>\n            <GTE name=\"AdvertisedTimeAtLocation\" value=\"${DateTime}\" />\n            <LTE name=\"AdvertisedTimeAtLocation\" value=\"${LteDateTime}\" />\n        </FILTER>\n        <INCLUDE>AdvertisedTrainIdent</INCLUDE>\n        <INCLUDE>LocationSignature</INCLUDE>\n        <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\n  </QUERY>\n</REQUEST>`\n    console.log(text)\nreturn text;\n}\n\n\nfunction st_message(LocationSignature) {\nconsole.log(LocationSignature);\n\tvar text = `\n<REQUEST>\n    <LOGIN authenticationkey=\"${openapiconsolekey}\"/>\n      <QUERY objecttype=\"TrainMessage\" schemaversion=\"1.3\">\n            <FILTER>\n                  <EQ name=\"AffectedLocation\" value=\"${LocationSignature}\" />\n            </FILTER>\n            <INCLUDE>ExternalDescription</INCLUDE>\n      </QUERY>\n</REQUEST>`\n    console.log(text)\nreturn text;\n}\n\nfunction createReport(input) {\n    var adTime=input.AdvertisedTimeAtLocation\n    var trainNo=input.AdvertisedTrainIdent.slice(0,-4)+\" \"+input.AdvertisedTrainIdent.slice(-4,-2)+\" \"+input.AdvertisedTrainIdent.slice(-2)\n    var track=input.TrackAtLocation\n    var begin=input.LocationSignature\n    var final=input.ToLocation[0].LocationName\n    var departureTime=adTime.slice(11,16)\n    if (track==\"x\"){\n        var text = `Train ${trainNo}, from ${stationName[begin]} to ${stationName[final]}, will departure at ${departureTime}, but the train is canceled.`\n    }\n    else {\n        var text = `Train ${trainNo}, from ${stationName[begin]} to ${stationName[final]}, will departure at ${departureTime}, from track ${track}.`\n        }\n    console.log(text)\n    return text\n}\n\nfunction createMoreReport(input) {\n    //console.log(input);\n    var trainNo=input[0].AdvertisedTrainIdent.slice(0,-4)+\" \"+input[0].AdvertisedTrainIdent.slice(-4,-2)+\" \"+input[0].AdvertisedTrainIdent.slice(-2)\n    var begin=input[0].LocationSignature\n    var begintime=input[0].AdvertisedTimeAtLocation.slice(11,16)\n    var final=input[input.length - 1].LocationSignature\n    var finaltime=input[input.length - 1].AdvertisedTimeAtLocation.slice(11,16)\n    var stations=\"\"    \n    for (const [key, value] of Object.entries(input)) {\n      //console.log(`${key}`);\n      if (key == 0){ continue }; \n      if (key % 2 == 0){ continue };\n      if (key == input.length-1){ continue };\n      stations = stations + \", \" + stationName[value.LocationSignature]\n    };\n    var text=`\n    The train ${trainNo}, will departure from ${stationName[begin]} at ${begintime}. calling at ${stations},\n    and finally arrive at ${stationName[final]} at ${finaltime}.\n    `\n    return text\n};\n\nfunction create_St_message(input, from) {\n    var text=`Announcement from ${stationName[from]} Station. \\n`;\n    for (const [key, value] of Object.entries(input)) {\n        text = text + `No.${Number(key)+1}: ${value.ExternalDescription.slice(0,50)} \\n`\n    }\n    console.log(text);\n    return text\n};\n\n//Trafikverket API\nconst proxyurl = \"\";\nconst rasaurl = 'https://api.trafikinfo.trafikverket.se/v2/data.json'\nconst tvRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n       // headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: text\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { departureMachine } from \"./dmDeparture\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    context: {count : 0},\n    states: {\n        dm: {\n          initial: 'init',\n          id: \"dm\",\n          states:{\n                        \n              init: {on: {CLICK: 'dmDeparture'}},\n              dmDeparture: {...departureMachine},\n          }\n\n\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            actions: assign((context) => { return { count: 0 } }),\n                            target:'idle'\n                        },\n                        //MAXSPEECH: 'idle',\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Train Info\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a input.');\n                listen({\n                    interimResults: false,\n                    continuous: true,\n                    lang: \"sv-SE\",\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda, lang: \"en-US\" });\n                  /*var u = new SpeechSynthesisUtterance();\n                  u.text = context.ttsAgenda;\n                  u.lang = 'sv-SE';\n                console.log(u)\n                speechSynthesis.speak(u);*/\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n\n","//\n//  srgs.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n//////////////////////////////////////////////////////////////////////\n// encoding SRGS grammars in javascript\n\nexport function Grammar(root) {\n  this.$root = root;\n  \n  this.VOID = [OneOf([])];\n  this.NULL = [];\n  this.GARBAGE = []; \n  \n  this.$check = function() {\n    for (var i in this) {\n      if (i !== \"$root\" && i !== \"$check\") {\n\ttry {\n\t  checkSequenceExpansion(this[i]);\n\t} catch(err) {\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\n\t}\n      }\n    }\n  }\n}\n\nexport function WordSet(str) {\n  var words = str.split(/ +/);\n  var set = {};\n  for (var i in words) {\n    set[words[i]] = true;\n  }\n  return set;\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion constructors\n\n// sequences are ordinary arrays\nexport function Sequence(seq) {\n  return seq;\n}\n\nexport function Ref(ref) {\n  return new RefClass(ref);\n}\n\nexport function Tag(tag) {\n  return new TagClass(tag);\n}\n\nexport function OneOf(alternatives) {\n  return new OneOfClass(alternatives);\n}\n\nexport function Repeat(min, max, sequence) {\n  return new RepeatClass(min, max, sequence);\n}\n\nexport function Optional(sequence) {\n  return new RepeatClass(0, 1, sequence);\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion classes\n\nexport function RefClass(ruleref) {\n  this.content = ruleref;\n  this._string = \"$\" + ruleref;\n  this.toString = function toString() {return this._string}\n}\n    \nexport function TagClass(tag) {\n  this.content = tag;\n  this._string = \"{\" + tag + \"}\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function OneOfClass(alternatives) {\n  this.content = alternatives;\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function RepeatClass(min, max, sequence) {\n  this.min = min;\n  this.max = max;\n  this.content = sequence;\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\n  this.toString = function toString() {return this._string}\n}\n\n//////////////////////////////////////////////////////////////////////\n// checking rule expansions\n\nexport function throwRuleError(message, error) {\n  if (error == undefined) {\n    throw TypeError(message);\n  } else {\n    throw TypeError(message + \"; \" + error.message);\n  }\n}\n\nexport function checkSequenceExpansion(sequence) {\n  try {\n    if (sequence.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\n    }\n    for (var i in sequence) {\n      if (sequence[i].constructor == Array) {\n\tcheckSequenceExpansion(sequence[i]);\n      } else if (sequence[i].constructor != String) {\n\tsequence[i].checkExpansion();\n      }\n    }\n  } catch(err) {\n    throwRuleError(\"When checking sequence expansion\", err);\n  }\n};\n\nRefClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nTagClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.content.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\n    }\n    for (var i in this.content) {\n      checkSequenceExpansion(this.content[i]);\n    }\n  } catch(err) {\n    throwRuleError(\"When checking OneOf content\", err);\n  }\n};\n\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\n    }\n    if (!(0 <= this.min && this.min <= this.max)) {\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\n    }\n    checkSequenceExpansion(this.content);\n  } catch(err) {\n    throwRuleError(\"When checking Repeat content\", err);\n  }\n};\n\n"],"sourceRoot":""}