{"version":3,"sources":["srgs.js","chartparser.js","runparser.js","grammars/departure.ts","grammars/stationName.ts","dmDeparture.ts","index.tsx"],"names":["Grammar","root","this","$root","VOID","OneOf","NULL","GARBAGE","$check","i","checkSequenceExpansion","err","throwRuleError","Ref","ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","min","max","sequence","RepeatClass","ruleref","content","_string","toString","join","Infinity","message","error","undefined","TypeError","constructor","Array","name","String","checkExpansion","prototype","Number","LOG","str","clone","obj","temp","key","isEmpty","ob","hasOwnProperty","Chart","numberOfWords","passives","actives","add","edge","subchart","cat","isPassive","start","lhs","end","next","resultsForRule","results","finalEdges","push","out","allEdges","allPassiveEdges","concat","allActiveEdges","edges","j","k","statistics","length","nrEdges","nrPassiveEdges","nrActiveEdges","PassiveEdge","ActiveEdge","rest","rules","text","parse","words","grammar","filter","chart","agenda","leftCornerFilter","addToChart","inference","rhs","slice","SRGS","oneof","eval","position","leftCorners","pop","active","passive","loadGrammar","dom","DOMParser","parseFromString","ActiveXObject","doc","XML","newDocument","loadXML","url","encodeURIComponent","request","XMLHttpRequest","open","send","responseXML","parseXML","getElementsByTagName","getAttribute","xrules","r","xrule","processRuleExpansions","xitems","childNodes","rule","nodeType","textContent","trim","split","nodeName","uri","repeat","parseInt","console","log","stationName","actions","cancel","openapiconsolekey","gram","yesnogram","prs_grammar","input","result","commands","say","_context","type","value","listen","departureMachine","initial","id","states","transitions","on","CHECK","target","cond","context","from","to","date","time","order","exit","event","main_function","RECOGNISED","includes","recResult","assign","replace","startover","entry","ENDSPEECH","stop","welcome","prompt","overall","ask","confirm","yesnoanswer","choose","always","nomatch","final","check","invoke","src","tvRequest","currentdate","Date","getHours","getMinutes","getFullYear","getMonth","getDate","DateTime","LteDateTime","asc_desc","createText","onDone","data","RESPONSE","RESULT","onError","success","TrainAnnouncement","output_text","adTime","AdvertisedTimeAtLocation","trainNo","AdvertisedTrainIdent","track","TrackAtLocation","begin","LocationSignature","ToLocation","LocationName","departureTime","createReport","failure","read_no_result","read_result","toLowerCase","do_next","more_info","begintime","finaltime","stations","Object","entries","createMoreReport","st_message","TrainMessage","ExternalDescription","create_St_message","fetch","Request","method","body","then","json","inspect","iframe","machine","Machine","count","dm","init","CLICK","dmDeparture","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","intent","clear_context","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","lang","recStop","ttsStart","effect","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.bd016cc8.chunk.js","sourcesContent":["//\n//  srgs.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n//////////////////////////////////////////////////////////////////////\n// encoding SRGS grammars in javascript\n\nexport function Grammar(root) {\n  this.$root = root;\n  \n  this.VOID = [OneOf([])];\n  this.NULL = [];\n  this.GARBAGE = []; \n  \n  this.$check = function() {\n    for (var i in this) {\n      if (i !== \"$root\" && i !== \"$check\") {\n\ttry {\n\t  checkSequenceExpansion(this[i]);\n\t} catch(err) {\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\n\t}\n      }\n    }\n  }\n}\n\nexport function WordSet(str) {\n  var words = str.split(/ +/);\n  var set = {};\n  for (var i in words) {\n    set[words[i]] = true;\n  }\n  return set;\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion constructors\n\n// sequences are ordinary arrays\nexport function Sequence(seq) {\n  return seq;\n}\n\nexport function Ref(ref) {\n  return new RefClass(ref);\n}\n\nexport function Tag(tag) {\n  return new TagClass(tag);\n}\n\nexport function OneOf(alternatives) {\n  return new OneOfClass(alternatives);\n}\n\nexport function Repeat(min, max, sequence) {\n  return new RepeatClass(min, max, sequence);\n}\n\nexport function Optional(sequence) {\n  return new RepeatClass(0, 1, sequence);\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion classes\n\nexport function RefClass(ruleref) {\n  this.content = ruleref;\n  this._string = \"$\" + ruleref;\n  this.toString = function toString() {return this._string}\n}\n    \nexport function TagClass(tag) {\n  this.content = tag;\n  this._string = \"{\" + tag + \"}\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function OneOfClass(alternatives) {\n  this.content = alternatives;\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function RepeatClass(min, max, sequence) {\n  this.min = min;\n  this.max = max;\n  this.content = sequence;\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\n  this.toString = function toString() {return this._string}\n}\n\n//////////////////////////////////////////////////////////////////////\n// checking rule expansions\n\nexport function throwRuleError(message, error) {\n  if (error == undefined) {\n    throw TypeError(message);\n  } else {\n    throw TypeError(message + \"; \" + error.message);\n  }\n}\n\nexport function checkSequenceExpansion(sequence) {\n  try {\n    if (sequence.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\n    }\n    for (var i in sequence) {\n      if (sequence[i].constructor == Array) {\n\tcheckSequenceExpansion(sequence[i]);\n      } else if (sequence[i].constructor != String) {\n\tsequence[i].checkExpansion();\n      }\n    }\n  } catch(err) {\n    throwRuleError(\"When checking sequence expansion\", err);\n  }\n};\n\nRefClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nTagClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.content.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\n    }\n    for (var i in this.content) {\n      checkSequenceExpansion(this.content[i]);\n    }\n  } catch(err) {\n    throwRuleError(\"When checking OneOf content\", err);\n  }\n};\n\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\n    }\n    if (!(0 <= this.min && this.min <= this.max)) {\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\n    }\n    checkSequenceExpansion(this.content);\n  } catch(err) {\n    throwRuleError(\"When checking Repeat content\", err);\n  }\n};\n\n","//\n//  chartparser.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* Mods by Torbjörn\n- Removed the toString() method from Object. Why does it still work?\n- Added a text variable (similar to rules). See \n*/\n\n//////////////////////////////////////////////////////////////////////\n// a logging function\n//  - uncomment if you want to debug the parsing process\nfunction LOG(str) {\n  //console.log(\"\" + str);\n}\n\nimport * as SRGS from './srgs'\n\n//////////////////////////////////////////////////////////////////////\n// we need to be able to clone objects between different edges\n// borrowed from http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\nfunction clone(obj){\n  if (obj == null || typeof(obj) != 'object') {\n    return obj;\n  }\n  var temp = new obj.constructor(); \n  for (var key in obj) {\n    temp[key] = clone(obj[key]);\n  }\n  return temp;\n}\n\n\nfunction isEmpty(ob){\n   for (var i in ob) { if(ob.hasOwnProperty(i)) {return false;}}\n  return true;\n}\n\n//////////////////////////////////////////////////////////////////////\n// parse chart\n// conceptually this is a set of edges, but it is optimized\nfunction Chart(numberOfWords) {\n  this.numberOfWords = numberOfWords;\n  this.passives = new Array(numberOfWords);\n  this.actives = new Array(numberOfWords);\n  for (var i = 0; i <= numberOfWords; i++) {\n    this.passives[i] = {};\n    this.actives[i] = {};\n  }\n\n  // Chart.add(edge)\n  // add the edge to the chart, return true if the chart was changed \n  // (i.e. if the chart didn't already contain the edge)\n  this.add = function add(edge) {\n    var subchart, cat;\n    if (edge.isPassive) {\n      subchart = this.passives[edge.start];\n      cat = edge.lhs;\n    } else {\n      subchart = this.actives[edge.end];\n      cat = edge.next.content;\n    }\n    if (!(cat in subchart)) {\n      subchart[cat] = {};\n    }\n    if (edge in subchart[cat]) {\n      return false;\n    } else {\n      subchart[cat][edge] = edge;\n      return true;\n    }\n  }\n\n  // Chart.resultsForRule(lhs, start, end)\n  // return all parse results for the given lhs, start, and end\n  //  - start, end are optional; defaults to 0, numberOfWords\n  this.resultsForRule = function resultsForRule(lhs, start, end) {\n    start = start || 0;\n    end = end || numberOfWords;\n    var results = [];\n    var finalEdges = this.passives[start][lhs];\n    for (var i in finalEdges) {\n      if (finalEdges[i].end == end) {\n\tresults.push(finalEdges[i].out);\n      }\n    }\n    return results;\n  }\n  \n  // Chart.allEdges() / Chart.allPassiveEdges() / Chart.allActiveEdges()\n  // return an array of all (passive/active) edges in the chart\n  this.allEdges = function allEdges() {\n    return this.allPassiveEdges().concat(this.allActiveEdges());\n  }\n  this.allPassiveEdges = function allPassiveEdges() {\n    var edges = [];\n    for (var i in this.passives) \n      for (var j in this.passives[i]) \n\tfor (var k in this.passives[i][j])\n\t  edges.push(this.passives[i][j][k]);\n    return edges;\n  }\n  this.allActiveEdges = function allActiveEdges() {\n    var edges = [];\n    for (var i in this.actives) \n      for (var j in this.actives[i]) \n\tfor (var k in this.actives[i][j])\n\t  edges.push(this.actives[i][j][k]);\n    return edges;\n  }\n\n  // Chart.statistics()\n  // return the number of edges in the chart\n  this.statistics = function statistics() {\n    var passives = this.allPassiveEdges().length;\n    var actives = this.allActiveEdges().length;\n    return {nrEdges: passives+actives, nrPassiveEdges: passives, nrActiveEdges: actives};\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////\n// parse edges: passive and active\n\nfunction PassiveEdge(start, end, lhs, out) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.out = out;\n  this.isPassive = true;\n\n  var str = \"[\" + start + \"-\" + end + \"] $\" + lhs + \" := \" + out;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\nfunction ActiveEdge(start, end, lhs, next, rest, out, rules, text) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.next = next;\n  this.rest = rest;\n  this.out = out;\n  this.rules = rules;\n  this.text = text;\n  this.isPassive = false;\n\n  var str = \"<\" + start + \"-\" + end + \"> $\" + lhs + \" -> \" + next + \n    \", \" + rest + \" := \" + out + \" <- \" + rules;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\n\n//////////////////////////////////////////////////////////////////////\n// the main parsing function: a simple top-down chartparser\n//  - 'words' is an array of strings\n//  - 'grammar' is a hash table of left-hand-sides mapping to arrays of right-hand-sides\n//  - 'root' is the starting category (a string)\n//    if unspecified, use the '$root' property of the grammar\n//  - 'filter' is an optional left-corner filter \n//    (a mapping from categories/rule-refs to words)\n//    if specified, it is used when predicting new edges\n// returns the final chart\nexport function parse(words, grammar, root, filter) {\n  if (!root) {\n    root = grammar.$root;\n  }\n  var chart = new Chart(words.length);\n  var agenda = [];\n\n  var leftCornerFilter;\n  if (filter == undefined) {\n    leftCornerFilter = function() {return true};\n  } else {\n    leftCornerFilter = function leftCornerFilter(ruleref, position) {\n      var leftCorners = filter[ruleref];\n      return leftCorners ? words[position] in leftCorners : true;\n    }\n  }\n  \n  // add an edge to the chart and the agenda, if it does not already exist\n  function addToChart(inference, start, end, lhs, rhs, out, rules, text) {\n    var edge;\n    if (rhs.length > 0) {\n      var next = rhs[0];\n      var rest = rhs.slice(1);\n      switch (next.constructor) {\n\t\n      case Array:\n\t// the next symbol is a sequence\n\taddToChart(inference+\",SEQUENCE\", start, end, lhs, next.concat(rest), out, rules, text);\n\treturn;\n\t\n      case SRGS.RepeatClass:\n\t// the next symbol is a repetition\n\tvar min = next.min;\n\tvar max = next.max;\n\t// skip repeat \n\tif (min <= 0) {\n\t  addToChart(inference+\",SKIP\", start, end, lhs, rest, out, rules, text);\n\t}\n\t// repeat \n\tif (max > 0) {\n\t  var content = next.content;\n\t  var rhs = (max==1 ? [content] : [content, SRGS.Repeat(min ? min-1 : min, max-1, content)]);\n\t  addToChart(inference+\",REPEAT\", start, end, lhs, rhs.concat(rest), out, rules, text);\n\t}\n\treturn;\n\t\n      case SRGS.OneOfClass:\n\t// the next symbol is a disjunction\n\tvar oneof = next.content;\n\tfor (var i in oneof) {\n\t  var rhs = oneof[i].concat(rest);\n\t  addToChart(inference+\",ONEOF\", start, end, lhs, rhs, out, rules, text);\n\t} \n\treturn;\n\t\n      case SRGS.TagClass:\n\t// the next symbol is a semantic action\n\tout = clone(out);\n\trules = clone(rules);\n\teval(next.content);\n\taddToChart(inference+\",TAG\", start, end, lhs, rest, out, rules, text);\n\treturn;\n      }\n\n      edge = new ActiveEdge(start, end, lhs, next, rest, out, rules, text);\n    } else {\n      edge = new PassiveEdge(start, end, lhs, out);\n    }\n    \n    // try to add the edge; if successful, also add it to the agenda\n    if (chart.add(edge)) {\n      LOG(\"+ \" + inference + \": \" + edge);\n      agenda.push(edge);\n    }\n  }\n  \n  // seed the agenda with the starting rule\n  addToChart(\"INIT\", 0, 0, root, grammar[root], {}, {}, {});\n  \n  // main loop\n  while (agenda.length > 0) {\n    var edge = agenda.pop();\n    var start= edge.start;\n    var end  = edge.end;\n    var lhs  = edge.lhs;\n    var next = edge.next;\n    LOG(edge);\n\n    if (edge.isPassive) {\n      // combine\n      var actives = chart.actives[start][lhs];\n      for (var i in actives) {\n\tvar active = actives[i];\n\tvar rules = clone(active.rules);\n\tvar text = active.text;\n\ttext[edge.lhs] = words.slice(start, end).join(\" \");\n\tif (typeof edge.out == 'object' && isEmpty(edge.out)) {\n\t    rules[edge.lhs] = text[edge.lhs];\n\t} else {\n        rules[edge.lhs] = clone(edge.out);\n    }\n\taddToChart(\"COMBINE\", active.start, end, active.lhs, active.rest, active.out, rules, text);\n      }\n\n    } else if (next.constructor == SRGS.RefClass) {\n      var ref = next.content;\n      // combine\n      var passives = chart.passives[end][ref];\n      for (var i in passives) {\n\tvar passive = passives[i];\n\tvar rules = clone(edge.rules);\n\tvar text = edge.text;\n\trules[passive.lhs] = clone(passive.out);\n\ttext[passive.lhs] = passive.text;\n\taddToChart(\"COMBINE\", start, passive.end, lhs, edge.rest, edge.out, rules, text);\n      }\n      // predict\n      if (ref in grammar) {\n\tif (leftCornerFilter(ref, end)) {\n\t  addToChart(\"PREDICT\", end, end, ref, grammar[ref], {}, {}, {});\n\t}\n      }\n\n    } else if (next == words[end]) {\n      // scan\n      addToChart(\"SCAN\", start, end+1, lhs, edge.rest, edge.out, edge.rules, edge.text);\n    }\n  }\n\n  return chart;\n}\n\n\n","//\n//  runparser.js\n//\n/*\n  The author or authors of this code dedicate any and all \n  copyright interest in this code to the public domain.\n*/\n\n\n// helper functions for the parser demo\n\nimport * as SRGS from './srgs'\n\nfunction getElement(id) {\n  return document.getElementById(id);\n}\n\nfunction appendElement(parent, element, text) {\n  var elem = document.createElement(element);\n  if (text)\n    elem.appendChild(document.createTextNode(text));\n  parent.appendChild(elem);\n  return elem\n}\n\nfunction runParser(input) {\n  var resultsDiv = getElement(\"results\");\n  resultsDiv.innerHTML = \"\";\n  var maybeFilter;\n  if (getElement(\"usefilter\") && getElement(\"usefilter\").checked) {\n    maybeFilter = filter;\n    appendElement(resultsDiv, \"EM\", \"Using left-corner filter\");\n  }\n  var startTime = new Date();\n  var parseChart = parse(input, grammar, grammar.$root, maybeFilter);\n  var parseTime = new Date() - startTime;\n  var parseResults = parseChart.resultsForRule(grammar.$root);\n  \n  console.log(parseResults[0]);\n  \n  if (parseResults) {\n    for (var i in parseResults) {\n        resultsDiv.innerHTML += display(parseResults[i],\"\");\n    }\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n  \n/*\n  if (parseResults) { \n    var resultList = appendElement(resultsDiv, \"OL\");\n    for (var i in parseResults) \n      appendElement(resultList, \"LI\", JSON.stringify(parseResults[i]));\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n*/\n  var statistics = parseChart.statistics()\n  appendElement(resultsDiv, \"P\", \"Chart size: \" + statistics.nrEdges + \" edges\" +\n\t\t\" (\" + statistics.nrPassiveEdges + \" passive)\");\n  appendElement(resultsDiv, \"P\", \"Parse time: \" + parseTime + \" ms\" + \n\t\t\" (\" + (parseTime / statistics.nrEdges).toFixed(2) + \" ms/edge)\");\n}\n\nfunction runWordParser() {\n  runParser(getElement(\"input\").value.split(/\\s+/));\n}\n\nfunction runCharacterParser() {\n  runParser(getElement(\"input\").value.split(\"\"));\n}\n\nexport function loadGrammar(str) {\n    var dom = parseXML(str);\n    var root = dom.getElementsByTagName(\"grammar\")[0].getAttribute(\"root\");\n    var grammar = new SRGS.Grammar(root);\n    var xrules = dom.getElementsByTagName(\"rule\");\n    for(var r=0; r < xrules.length; r++) {\n        var xrule = xrules[r];\n        var id = xrule.getAttribute(\"id\");\n        grammar[id] = processRuleExpansions(xrule);\n    }\n    return grammar;\n}\n\nfunction processRuleExpansions(xrule) {\n    var xitems = xrule.childNodes;\n    var rule = [];\n    for(var i=0; i < xitems.length; i++) {\n        if (xitems[i].nodeType == 3) {\n            var str = xitems[i].textContent.trim();\n            if (str != \"\") {\n                rule.push(str.split(/ +/));\n            }\n        } else if (xitems[i].nodeType == 1) {\n            if (xitems[i].nodeName == \"token\") {\n                rule.push(SRGS.Tag(xitems[i].textContent));\n            } else if (xitems[i].nodeName == \"ruleref\") {\n                var uri = xitems[i].getAttribute(\"uri\");\n                rule.push(SRGS.Ref(uri.slice(1)));\n            } else if (xitems[i].nodeName == \"tag\") {\n                rule.push(SRGS.Tag(xitems[i].textContent.trim()));\n            } else if (xitems[i].nodeName == \"one-of\") {\n                rule.push(SRGS.OneOf(processRuleExpansions(xitems[i])));\n            } else if (xitems[i].nodeName == \"item\") {\n                var repeat = xitems[i].getAttribute(\"repeat\");\n                if (!repeat) {\n                    rule.push(processRuleExpansions(xitems[i]));\n                } else {\n                    var r = repeat.split(\"-\");\n                    var min = parseInt(r[0]);\n                    var max = parseInt(r[1]);\n                    max = (max) ? max : Infinity;\n                    rule.push(SRGS.Repeat(min, max, processRuleExpansions(xitems[i])));\n                }\n            } else {\n                console.log(xitems[i]);\n            }\n        }\n    }\n\treturn rule;\n}\n\nfunction parseXML(text) {\n    if (typeof DOMParser != \"undefined\") {\n        // Mozilla, Firefox, and related browsers\n        return (new DOMParser()).parseFromString(text, \"application/xml\");\n    }\n    else if (typeof ActiveXObject != \"undefined\") {\n        // Internet Explorer.\n        var doc = XML.newDocument();  // Create an empty document\n        doc.loadXML(text);            // Parse text into it\n        return doc;                   // Return it\n    }\n    else {\n        // As a last resort, try loading the document from a data: URL\n        // This is supposed to work in Safari. Thanks to Manos Batsis and\n        // his Sarissa library (sarissa.sourceforge.net) for this technique.\n        var url = \"data:text/xml;charset=utf-8,\" + encodeURIComponent(text);\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, false);\n        request.send(null);\n        return request.responseXML;\n    }\n};\n","export const grammar = `\n<grammar root=\"final\">\n   <rule id=\"final\">\n      <tag> out = new Object();  </tag>\n      <one-of>\n         <item>\n             <one-of>\n               <item><ruleref uri=\"#time\"/> <tag> out.time = rules.time; </tag></item>\n               <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n             </one-of>\n         </item>\n         <item><tag>out.order = \"asc\";</tag>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <item repeat = \"0-1\">första</item><ruleref uri=\"#trainWord\"/>\n            <item repeat=\"0-4\">\n               <one-of>\n                  <item><ruleref uri=\"#time\"/> <tag> out.time = rules.time; </tag></item>\n                  <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n                  <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n                  <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n                  <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n               </one-of>\n            </item>\n         </item>\n         <item><tag>out.order = \"asc\";</tag>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <item>nästa</item><ruleref uri=\"#trainWord\"/>\n            <tag> out.time = 'NOW'; </tag><tag> out.date = 'today'; </tag>\n            <item repeat=\"0-2\"><one-of>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n               <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n            </one-of></item>\n         </item>\n         <item>\n            <ruleref uri=\"#QuestionWord\"/><ruleref uri=\"#verb\"/>\n            <ruleref uri=\"#which\"/><tag> out.time = rules.which.time; out.order = rules.which.order</tag>\n            <ruleref uri=\"#trainWord\"/>\n            <item repeat=\"0-3\"><one-of>\n               <item><ruleref uri=\"#date\"/> <tag> out.date = rules.date; </tag></item>\n               <item><ruleref uri=\"#from\"/> <tag> out.from = rules.from; </tag></item>\n               <item><ruleref uri=\"#to\"/> <tag> out.to = rules.to; </tag></item>\n               <item><ruleref uri=\"#fromto\"/><tag>out.from = rules.fromto.from; out.to = rules.fromto.to; </tag></item>\n            </one-of></item>\n         </item>\n         \n      </one-of>\n   </rule>\n\n   <rule id=\"trainWord\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> tåg </item>\n            <item> tåget </item>\n            <item> tågen </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"verb\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> kör </item>\n            <item> går </item>\n            <item> är </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"QuestionWord\">\n      <item repeat = \"0-1\">\n         <one-of>\n            <item> När </item>\n            <item> Vilken tid </item>\n            <item> Hur dags </item>\n         </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"which\">\n      <one-of>\n         <item><one-of><item> första </item><item> Första </item></one-of> <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item><one-of><item> sista </item><item> Sista </item></one-of><tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> det första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> det sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> den första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> den sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n         <item> de första <tag> out.time = '00:00'; out.order = \"asc\"; </tag></item>\n         <item> de sista <tag> out.time = '00:00'; out.order = \"desc\"; </tag></item>\n      </one-of>\n   </rule>\n   <rule id=\"fromto\">\n      <item repeat=\"0-1\">från</item><ruleref uri=\"#station\"/> <tag> out.from = rules.station; </tag>\n      <item repeat=\"0-1\"><one-of><item>till</item><item>mot</item></one-of></item>\n      <ruleref uri=\"#station\"/> <tag> out.to = rules.station; </tag>\n   </rule>\n   <rule id=\"from\">\n      <item>från</item><ruleref uri=\"#station\"/> <tag> out = rules.station; </tag>\n   </rule>\n   <rule id=\"to\">\n      <one-of><item>till</item><item>mot</item></one-of>\n      <ruleref uri=\"#station\"/> <tag> out = rules.station; </tag>\n   </rule>\n\n   <rule id=\"station\">\n      <one-of>\n         <item> Emmaboda <tag> out = 'Em'; </tag></item>\n         <item> Kalmar <tag> out = 'Kac'; </tag></item>\n         <item> Karlskrona <tag> out = 'Ck'; </tag></item>\n         <item> Holmsjö <tag> out = 'Hmö'; </tag></item>\n         <item> Bergåsa <tag> out = 'Båa'; </tag></item>\n         <item> Vissefjärda <tag> out = 'Vfa'; </tag></item>\n         <item> Örsjö <tag> out = 'Örs'; </tag></item>\n         <item> Nybro <tag> out = 'Nyb'; </tag></item>\n         <item> Trekanten <tag> out = 'Tre'; </tag></item>\n         <item> Smedby <tag> out = 'Sdy'; </tag></item>\n         <item> Malmö <tag> out = 'M'; </tag></item>\n         <item> Växjö <tag> out = 'Vö'; </tag></item>\n         <item> Hässleholm <tag> out = 'Hm'; </tag></item>\n         <item> Hovmantorp <tag> out = 'Hvp'; </tag></item>\n         <item> Lessebo <tag> out = 'Lo'; </tag></item>\n         <item> Göteborg <tag> out = 'G'; </tag></item>\n         <item> Alvesta <tag> out = 'Av'; </tag></item>\n         <item> Stockholm <tag> out = 'Cst'; </tag></item>\n      </one-of>\n      <item repeat = \"0-1\">\n          <one-of>\n             <item>station</item> <item>Station</item>\n             <item>centralstation</item> <item>Centralstation</item>\n             <item>C</item> <item>c</item> <item>central</item>\n             <item>stationen</item> <item>Stationen</item>\n             <item>centralstationen</item> <item>Centralstationen</item>\n          </one-of>\n      </item>\n   </rule>\n\n   <rule id=\"time\">\n\t   <item repeat=\"0-1\"> efter </item> <item repeat=\"0-1\"> klockan </item>\n\t   <one-of>\n\t     <item> nu <tag> out = \"NOW\"; </tag></item>\n\t     <item> now <tag> out = \"NOW\"; </tag></item>\n\t\t <item><ruleref uri=\"#hour\"/><tag>out = rules.hour+\":00\"</tag></item>\n\t\t <item><ruleref uri=\"#hour\"/>.<ruleref uri=\"#minute\"/><tag>out = rules.hour+\":\"+rules.minute;</tag></item>\n\t\t <item><ruleref uri=\"#hour\"/>och<ruleref uri=\"#minute\"/><tag>out.hour = rules.hour; out.minute = rules.minute;</tag></item>\n\t\t <item><ruleref uri=\"#minute\"/> över <ruleref uri=\"#hour\"/><tag>out = rules.hour+\":\"+rules.minute; </tag></item>\n\t\t <item><ruleref uri=\"#minute\"/> i <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour - 1)).slice(-2)+\":\"+(\"0\"+(60 - rules.minute)).slice(-2); </tag></item>\n\t\t <item> halv <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour-1)).slice(-2) +\":30\"; </tag></item>\n\t\t <item> kvart i <ruleref uri=\"#hour\"/><tag>out = (\"0\"+(rules.hour-1)).slice(-2) +\":45\"; </tag></item>\n\t\t <item> kvart över <ruleref uri=\"#hour\"/><tag>out = (\"0\"+rules.hour).slice(-2) +\":15\"; </tag></item>\n\t  </one-of>\n   </rule>\n   \n   <rule id=\"minute\">\n      <one-of>\n         <item><one-of><item>00</item><item>0</item><item>noll</item></one-of> <tag> out = '00'; </tag></item>\n         <item><one-of><item>01</item><item>1</item><item>ett</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item><item>två</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item><item>tre</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item><item>fyra</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item><item>fem</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item><item>sex</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item><item>sju</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item><item>åtta</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item><item>nio</item></one-of> <tag> out = '09'; </tag></item>\n         <item><one-of><item>10</item><item>tio</item></one-of><tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n         <item>25 <tag> out = '25'; </tag></item>\n         <item>26 <tag> out = '26'; </tag></item>\n         <item>27 <tag> out = '27'; </tag></item>\n         <item>28 <tag> out = '28'; </tag></item>\n         <item>29 <tag> out = '29'; </tag></item>\n         <item>30 <tag> out = '30'; </tag></item>\n         <item>31 <tag> out = '31'; </tag></item>\n         <item>32 <tag> out = '32'; </tag></item>\n         <item>33 <tag> out = '33'; </tag></item>\n         <item>34 <tag> out = '34'; </tag></item>\n         <item>35 <tag> out = '35'; </tag></item>\n         <item>36 <tag> out = '36'; </tag></item>\n         <item>37 <tag> out = '37'; </tag></item>\n         <item>38 <tag> out = '38'; </tag></item>\n         <item>39 <tag> out = '39'; </tag></item>\n         <item>40 <tag> out = '40'; </tag></item>\n         <item>41 <tag> out = '41'; </tag></item>\n         <item>42 <tag> out = '42'; </tag></item>\n         <item>43 <tag> out = '43'; </tag></item>\n         <item>44 <tag> out = '44'; </tag></item>\n         <item>45 <tag> out = '45'; </tag></item>\n         <item>46 <tag> out = '46'; </tag></item>\n         <item>47 <tag> out = '47'; </tag></item>\n         <item>48 <tag> out = '48'; </tag></item>\n         <item>49 <tag> out = '49'; </tag></item>\n         <item>50 <tag> out = '50'; </tag></item>\n         <item>51 <tag> out = '51'; </tag></item>\n         <item>52 <tag> out = '52'; </tag></item>\n         <item>53 <tag> out = '53'; </tag></item>\n         <item>54 <tag> out = '54'; </tag></item>\n         <item>55 <tag> out = '55'; </tag></item>\n         <item>56 <tag> out = '56'; </tag></item>\n         <item>57 <tag> out = '57'; </tag></item>\n         <item>58 <tag> out = '58'; </tag></item>\n         <item>59 <tag> out = '59'; </tag></item>\n         <item>60 <tag> out = '60'; </tag></item>\n      </one-of>\n   </rule>\n   <rule id=\"hour\">\n      <one-of>\n         <item><one-of><item>00</item><item>0</item><item>noll</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>01</item><item>1</item><item>ett</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item><item>två</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item><item>tre</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item><item>fyra</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item><item>fem</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item><item>sex</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item><item>sju</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item><item>åtta</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item><item>nio</item></one-of> <tag> out = '09'; </tag></item>\n         <item><one-of><item>10</item><item>tio</item></one-of><tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n      </one-of>\n   </rule>\n\n   <rule id=\"date\">\n         <one-of>\n            <item> idag <tag> out = 'today'; </tag></item>\n            <item> imorgon <tag> out = 'tomorrow'; </tag></item>\n            <item> today <tag> out = 'today'; </tag></item>\n            <item> tomorrow <tag> out = 'tomorrow'; </tag></item>\n            <item> \n               <item repeat=\"0-1\"> den </item><ruleref uri=\"#day\"/><ruleref uri=\"#month\"/>\n               <tag> out = '2021-'+ rules.month + '-' + rules.day ; </tag>\n            </item>\n         </one-of>\n   </rule>\n\n   <rule id=\"day\">\n      <one-of>\n         <item><one-of><item>01</item><item>1</item></one-of> <tag> out = '01'; </tag></item>\n         <item><one-of><item>02</item><item>2</item></one-of> <tag> out = '02'; </tag></item>\n         <item><one-of><item>03</item><item>3</item></one-of> <tag> out = '03'; </tag></item>\n         <item><one-of><item>04</item><item>4</item></one-of> <tag> out = '04'; </tag></item>\n         <item><one-of><item>05</item><item>5</item></one-of> <tag> out = '05'; </tag></item>\n         <item><one-of><item>06</item><item>6</item></one-of> <tag> out = '06'; </tag></item>\n         <item><one-of><item>07</item><item>7</item></one-of> <tag> out = '07'; </tag></item>\n         <item><one-of><item>08</item><item>8</item></one-of> <tag> out = '08'; </tag></item>\n         <item><one-of><item>09</item><item>9</item></one-of> <tag> out = '09'; </tag></item>\n         <item>10 <tag> out = '10'; </tag></item>\n         <item>11 <tag> out = '11'; </tag></item>\n         <item>12 <tag> out = '12'; </tag></item>\n         <item>13 <tag> out = '13'; </tag></item>\n         <item>14 <tag> out = '14'; </tag></item>\n         <item>15 <tag> out = '15'; </tag></item>\n         <item>16 <tag> out = '16'; </tag></item>\n         <item>17 <tag> out = '17'; </tag></item>\n         <item>18 <tag> out = '18'; </tag></item>\n         <item>19 <tag> out = '19'; </tag></item>\n         <item>20 <tag> out = '20'; </tag></item>\n         <item>21 <tag> out = '21'; </tag></item>\n         <item>22 <tag> out = '22'; </tag></item>\n         <item>23 <tag> out = '23'; </tag></item>\n         <item>24 <tag> out = '24'; </tag></item>\n         <item>25 <tag> out = '25'; </tag></item>\n         <item>26 <tag> out = '26'; </tag></item>\n         <item>27 <tag> out = '27'; </tag></item>\n         <item>28 <tag> out = '28'; </tag></item>\n         <item>29 <tag> out = '29'; </tag></item>\n         <item>30 <tag> out = '30'; </tag></item>\n         <item>31 <tag> out = '31'; </tag></item>\n      </one-of>\n   </rule>\n\n   <rule id=\"month\">\n      <one-of>\n         <item><one-of><item>Januari</item><item>januari</item></one-of><tag> out = '01'; </tag></item>\n         <item><one-of><item>Februari</item><item>februari</item></one-of><tag> out = '02'; </tag></item>\n         <item><one-of><item>Mars</item><item>mars</item></one-of><tag> out = '03'; </tag></item>\n         <item><one-of><item>April</item><item>april</item></one-of><tag> out = '04'; </tag></item>\n         <item><one-of><item>Maj</item><item>maj</item></one-of><tag> out = '05'; </tag></item>\n         <item><one-of><item>Juni</item><item>juni</item></one-of><tag> out = '06'; </tag></item>\n         <item><one-of><item>Juli</item><item>juli</item></one-of><tag> out = '07'; </tag></item>\n         <item><one-of><item>Augusti</item><item>augusti</item></one-of><tag> out = '08'; </tag></item>\n         <item><one-of><item>September</item><item>september</item></one-of><tag> out = '09'; </tag></item>\n         <item><one-of><item>Oktober</item><item>oktober</item></one-of><tag> out = '10'; </tag></item>\n         <item><one-of><item>November</item><item>november</item></one-of><tag> out = '11'; </tag></item>\n         <item><one-of><item>December</item><item>december</item></one-of><tag> out = '12'; </tag></item>\n      </one-of>\n   </rule>\n</grammar>\n`\n\nexport const yesnogrammar = `\n<grammar root=\"final\">\n   <rule id=\"final\">\n         <tag>out = new Object();</tag>\n         <item repeat=\"1-2\">\n             <one-of>\n                <item><ruleref uri=\"#yes\"/><tag>out.yesnoanswer = rules.yes;</tag></item>\n                <item><ruleref uri=\"#no\"/><tag>out.yesnoanswer = rules.no;</tag></item>\n             </one-of>\n         </item>\n   </rule>\n   <rule id=\"yes\">\n      <tag> out = true; </tag>\n      <one-of> \n         <item> yes </item>\n         <item> ja </item>\n         <item> absolut </item>\n         <item> korrekt </item>\n         <item> jajamen </item>\n         <item> Ja visst </item>\n      </one-of>\n   </rule>\n   <rule id=\"no\">\n      <tag> out = false; </tag>\n      <one-of> \n         <item> no </item>\n         <item> nej </item>\n         <item> nix </item>\n         <item> inte </item>\n      </one-of>\n   </rule>\n</grammar>\n`\n","export const stationName = {\n\"Em\" : \"Emmaboda\",\n\"Kac\" : \"Kalmar\",\n\"Ck\" : \"Karlskrona\",\n\"Nyb\" : \"Nybro\",\n\"M\" : \"Malmö\",\n\"Vö\" : \"Växjö\",\n\"Hm\" : \"Hässleholm\",\n\"Hvp\" : \"Hovmantorp\",\n\"G\" : \"Göteborg\",\n\"Av\" : \"Alvesta\",\n\"Cst\" : \"Stockholm\",\n\"Sdy\" : \"Smedby\",\n\"Tre\" : \"Trekanten\",\n\"Sdy\" : \"Smedby\",\n\"Vfa\" : \"Vissefjärda\",\n\"Hmö\" : \"Holmsjö\",\n\"Örs\" : \"Örsjö\",\n\"Båa\" : \"Bergåsa\",\n\"Lo\" : \"Lessebo\",\n};\n","import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar, yesnogrammar } from './grammars/departure';\nimport { stationName } from './grammars/stationName';\n\n// Trafikverket API's key\nconst openapiconsolekey = \"f16eb462dbdb435a8f3c22829c0e13bf\"\n\nconst gram = loadGrammar(grammar);\nconst yesnogram = loadGrammar(yesnogrammar);\n\nfunction prs_grammar(input: string, grammar) {\n  //console.log(input);\n  var prs = parse(input.split(/\\s+/), grammar);\n  var result = prs.resultsForRule(gram.$root);\n  if (result[0]===undefined){\n     result=[{\"reserve\":\"reserve\"}]};\n  //console.log(result);\n  return result[0];\n};\n\nconst commands=[\"stop\",\"start over\",\"help\",\"go back\"];\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n};\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return [send(\"LISTEN\"), //send('MAXSPEECH', {delay: 6000, id:'maxsp'}) \n           ]\n};\n\nexport const departureMachine: MachineConfig<SDSContext, any, SDSEvent> = (\n{\n    initial: 'main_function',\n    id: \"departureMachine\",\n    type: 'parallel',\n    states: {\n\t    transitions: {\n\t        id: \"function\",\n\t        on: { \n\t\t        CHECK: [\n                    { target: \"#main.overall\", cond: (context) => context.from === undefined \n                              && context.to === undefined && context.date === undefined \n                              && context.time === undefined && context.order === undefined },\n                    { target: \"#main.from\", cond: (context) => context.from === undefined },\n\t\t        \t{ target: \"#main.to\", cond: (context) => context.to === undefined },\n\t\t        \t{ target: \"#main.time\", cond: (context) => context.time === undefined },\n                    { target: \"#main.date\", cond: (context) => context.date === undefined },\n\t\t        \t{ target: \"#main.final\", \n\t\t\t          cond: (context) => context.from !== undefined && context.to !== undefined \n                            && context.time !== undefined && context.date !== undefined\n                            && context.order !== undefined\n                    }\n\t        \t    ],\n\t        },\n\t        exit : [(context, event) => console.log(context), cancel(\"check\")],\n\t    },\n\t    \n        main_function: {\n            initial: \"welcome\",\n            id: \"main\",\n            on: {\n                RECOGNISED: [\n                   { target: '.stop', cond: (context) => ['stopp', 'stop', 'sluta'].includes(context.recResult) },\n                   { target: '.startover', cond: (context) => ['start over', 'börja om', 'start from the beginning', 'start from beginning'].includes(context.recResult) },\n\n\t\t   { actions: [\n                       assign((context) => { return { from: \"from\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).from : context.from } }),\n                       assign((context) => { return { to: \"to\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).to : context.to } }),\n                       assign((context) => { return { order: \"order\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).order : context.order } }),\n                       assign((context) => { return { time: \"time\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).time : context.time } }),\n                       assign((context) => { return { date: \"date\" in (prs_grammar(context.recResult.replace('.',' . '), gram)) ? prs_grammar(context.recResult.replace('.',' . '), gram).date : context.date } }),\n\t\t       send(\"CHECK\")]\n                   }\n\n                 ] \n            },\n            states:{\n\t            startover: {\n                    entry: send((_context: SDSContext) => ({ type: \"SPEAK\", value: \"OK. Starting over\" })),\n                    on: { ENDSPEECH: \"#departureMachine\" },\n                    exit: ['clear_context', cancel(\"ENDSPEECH\")]\n                },\n\n                stop: {\n                    entry: say(\"OK. Going back to the root menu.\"),\n                    on: { ENDSPEECH: '#root'},\n                    exit: 'clear_context',\n                },\n                \n            \twelcome: {\n                        initial: \"prompt\",\n                        \n     \t            on: { ENDSPEECH: \"overall\" },\n            \t    states: {\n            \t        prompt: { entry: say(\"Welcome!\") }\n            \t    }\n            \t},\n            \toverall: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n                                entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `Provide some information about the departure.`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\"}\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tfrom: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n                                entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `from which station?`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\"}\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tto: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: ` to which station? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \ttime: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `After which time? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n            \tdate: {\n            \t    initial: \"prompt\",\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\",\n            \t                value: `Which day? `\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: listen()\n            \t        },\n            \t    }\n            \t},\n\t            confirm: {\n\t                initial: \"prompt\",\n\t                on: {\n            \t        RECOGNISED: [\n            \t        {\n            \t            cond: (context) => \"yesnoanswer\" in (prs_grammar(context.recResult, yesnogram) || {}),\n            \t            actions: \n                                    [assign((context) => { return { confirm: prs_grammar(context.recResult, yesnogram).yesnoanswer } }), \n                                ],\n            \t            target: \".choose\"\n            \t        },\n            \t        { target: \".nomatch\", cond: (context) => !(commands.includes(context.recResult)) }]\n            \t    },\n            \t    states: {\n            \t        prompt: {\n            \t            entry: send((context) => ({\n            \t                type: \"SPEAK\", \n            \t                //value: `are you sure?`\n            \t                value: `Do you want to check when the train goes from ${stationName[context.from]} to ${stationName[context.to]} after ${context.time} for ${context.date} ?`\n            \t            })),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        ask: {\n            \t            entry: send(\"LISTEN\")\n            \t        },\n            \t        choose: {\n            \t              always:  [\n            \t                     {target: '#main.final', cond: (context) => context.confirm === true },\n                    \t             {actions: 'clear_context',\n                                      target: '#main.welcome', cond: (context) => context.confirm === false }\n                    \t            ] \n                    \t},\n                    \tnomatch: {\n                    \t    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    \t    on: { ENDSPEECH: \"prompt\" }\n                    \t}\n               \t     }\t\n            \t},\n       \t        final: {\n         \t        initial: \"prompt\",\n       \t            states: {\n        \t            prompt: { \n                \t        entry: say(\"OK. Checking.\"),\n                            on : { ENDSPEECH: \"check\"} \n\t\t\t            },\n\t\t\t            check: {\n\t\t\t                invoke: {\n                                id: 'tvrequest',\n                                src: (context) => tvRequest(createText(context.from, context.to, context.time, context.date, context.order)),\n                                onDone: {\n                                  actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] }),\n                                             ], \n                                  target: 'success',\n                                },\n                                onError: {\n                                  target: 'failure',\n                                  actions: assign({ error: (context, event) => event.data })\n                                }\n                            }\n                        },\n                        success: {\n                           always: [\n                               {\n                                target: \"#main.read_no_result\",  \n                                cond: (context) => context.result.TrainAnnouncement.length == 0 \n                               },\n                               {\n                                actions: [assign({ output_text: (context) => \n                                         createReport(context.result.TrainAnnouncement[0]) }),\n                                         assign({ temp: (context) => \n                                         context.result.TrainAnnouncement[0].AdvertisedTrainIdent })],\n                                target: \"#main.read_result\", \n                                cond: (context) => context.result.TrainAnnouncement.length !=0 \n                               }\n                           ], \n          \n                        },\n                        failure: {\n                          entry: say(\"failed to fetch data from the authority. Try again.\"),\n                          on: { ENDSPEECH: \"#main\" },\n                          exit: 'clear_context',\n                        },\n\t\t            }\n            \t},\n\n    \t        read_no_result: {\n                    entry: [say(\"Sorry, No related info has been found. Try again.\")],\n                    on : { ENDSPEECH: \"#main.overall\"}, \n                    exit: 'clear_context',\n                },\n\n                read_result: {\n                    initial: \"prompt\",\n                    on: {\n            \t        RECOGNISED: [\n            \t        {target: \".prompt\", cond: (context) => [\"en gång till\", \"igen\", \"again\", \"repeat\", \"listen again\"].includes(context.recResult.toLowerCase()) },\n            \t        {target: \".more_info\", cond: (context) => [\"mer info\", \"mer information\", \"more info\"].includes(context.recResult.toLowerCase())},\n            \t        {target: \".st_message\", cond: (context) => [\"stations meddelande\", \"station announcement\", \"announcement\", \"meddelande\"].includes(context.recResult.toLowerCase())},\n            \t        {actions: \"clear_context\", \n            \t         target: \"#main.overall\", \n            \t         cond: (context) => [\"gå tillbaka\", \"börja om\", \"go back\", \"start over\" ].includes(context.recResult.toLowerCase())},\n            \t        { target: \".nomatch\"}\n            \t        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\", value: context.output_text \n                                })),\n                            on : { ENDSPEECH: \"do_next\"}\n                        },\n                        do_next: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\", value: `listen to more train infomation? or station's announcement?` \n                                })),\n                            on : { ENDSPEECH: \"ask\"}\n                        },\n                        ask: {\n                            entry: send(\"LISTEN\")\n                        },\n                        nomatch: {\n            \t            entry: say(\"Listen again? or more train infomation? stations announcement? or start over?\"),\n            \t            on: { ENDSPEECH: \"ask\" }\n            \t        },\n            \t        more_info: {\n                 \t        initial: \"prompt\",\n               \t            states: {\n                \t            prompt: { \n                        \t        entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: \"checking train details\", \n                                //value: `checking more info about train ${context.result.TrainAnnouncement[0].AdvertisedTrainIdent}` \n                                })),\n                                    on : { ENDSPEECH: \"check\"} \n\t\t\t                    },\n\t\t\t                    check: {\n\t\t\t                        invoke: {\n                                        id: 'tvrequest',\n                                        //src: (context) => tvRequest(more_info(context.result.TrainAnnouncement[0].AdvertisedTrainIdent, context.time, context.date)),\n                                        src: (context) => tvRequest(more_info(context.temp, context.time, context.date)),\n                                        onDone: {\n                                          actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] })], \n                                          target: 'success',\n                                        },\n                                        onError: {\n                                          target: 'failure',\n                                          actions: assign({ error: (context, event) => event.data })\n                                        }\n                                    }\n                                },\n                                success: {\n                                   always: [\n                                       {\n                                        target: \"#main.read_no_result\",  \n                                        cond: (context) => context.result.TrainAnnouncement.length == 0 \n                                       },\n                                       {\n                                        actions: assign({ output_text: (context) => \n                                                 createMoreReport(context.result.TrainAnnouncement) }),\n                                        target: \"#main.read_result\", \n                                        cond: (context) => context.result.TrainAnnouncement.length !=0 \n                                       }\n                                   ], \n                  \n                                },\n                                failure: {\n                                  entry: say(\"failed to fetch data from the authority. Try again.\"),\n                                  on: { ENDSPEECH: \"#main\" },\n                                  exit: 'clear_context',\n                                },\n\t\t                    }            \t        \n            \t        },\n            \t        st_message: {\n                 \t        initial: \"prompt\",\n               \t            states: {\n                \t            prompt: { \n                        \t        entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: \"checking the station's announcement\", \n                                })),\n                                    on : { ENDSPEECH: \"check\"} \n\t\t\t                    },\n\t\t\t                    check: {\n\t\t\t                        invoke: {\n                                        id: 'tvrequest',\n                                        //src: (context) => tvRequest(st_message(context.result.TrainAnnouncement[0].LocationSignature)),\n                                        src: (context) => tvRequest(st_message(context.from)),\n                                        onDone: {\n                                          actions: [ assign({ result: (context, event) => event.data.RESPONSE.RESULT[0] })], \n                                          target: 'success',\n                                        },\n                                        onError: {\n                                          target: 'failure',\n                                          actions: assign({ error: (context, event) => event.data })\n                                        }\n                                    }\n                                },\n                                success: {\n                                   always: [\n                                       {\n                                        target: \"#main.read_no_result\",  \n                                        cond: (context) => context.result.TrainMessage.length == 0 \n                                       },\n                                       {\n                                        actions: assign({ output_text: (context) => \n                                                 create_St_message(context.result.TrainMessage, context.from) }),\n                                        target: \"#main.read_result\", \n                                        cond: (context) => context.result.TrainMessage.length !=0 \n                                       }\n                                   ], \n                  \n                                },\n                                failure: {\n                                  entry: say(\"failed to fetch data from the authority. Try again.\"),\n                                  on: { ENDSPEECH: \"#main\" },\n                                  exit: 'clear_context',\n                                },\n\t\t                    }            \t        \n            \t        },\n                    },     \n                },\n\t        },\n        },\n    },\n})\n\nfunction createText(from, to, time, date, order) {\n    var currentdate = new Date()\n    if (time === \"NOW\") {\n        var time = (\"0\" + currentdate.getHours()).slice(-2)+\":\"+(\"0\" + currentdate.getMinutes()).slice(-2)\n    };\n    if (date === \"today\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+currentdate.getDate()).slice(-2)\n    }\n    if (date === \"tomorrow\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+(currentdate.getDate()+1)).slice(-2)\n    }    \n    var DateTime = date + \"T\" + time;\n    console.log(DateTime)\n    var LteDateTime = date + \"T\" + \"23:59:59\"\n    // console.log(LteDateTime)\n    if (order == \"desc\") {\n        var asc_desc = \"desc\"; \n    } else {\n        var asc_desc = \"asc\"; \n      };\n    \n\tvar text = `\n\t<REQUEST>\n      <LOGIN authenticationkey=\"${openapiconsolekey}\" />\n      <QUERY objecttype=\"TrainAnnouncement\" schemaversion=\"1.3\" orderby=\"AdvertisedTimeAtLocation ${asc_desc}\" limit=\"1\">\n            <FILTER>\n                  <AND>\n                        <EQ name=\"ActivityType\" value=\"Avgang\" />\n                        <EQ name=\"LocationSignature\" value=\"${from}\" />\n                        <EQ name=\"ToLocation.LocationName\" value=\"${to}\" />\n                        <GTE name=\"AdvertisedTimeAtLocation\" value=\"${DateTime}\" />\n                        <LTE name=\"AdvertisedTimeAtLocation\" value=\"${LteDateTime}\" />\n                  </AND>\n            </FILTER>\n            <INCLUDE>AdvertisedTrainIdent</INCLUDE>\n            <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\n            <INCLUDE>TrackAtLocation</INCLUDE>\n            <INCLUDE>LocationSignature</INCLUDE>\n            <INCLUDE>ToLocation.LocationName</INCLUDE>\n            \n      </QUERY>\n    </REQUEST>`\n    console.log(text)\nreturn text;\n}\n\nfunction more_info(trainNo, time, date) {\n    var currentdate = new Date()\n    if (time === \"NOW\") {\n        var time = (\"0\" + currentdate.getHours()).slice(-2)+\":\"+(\"0\" + currentdate.getMinutes()).slice(-2)\n    };\n    if (date === \"today\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+currentdate.getDate()).slice(-2)\n    }\n    if (date === \"tomorrow\") {\n        var date = currentdate.getFullYear()+\"-\"+(\"0\"+(currentdate.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+(currentdate.getDate()+1)).slice(-2)\n    }    \n    var DateTime = date + \"T\" + time;\n    console.log(DateTime)\n    var LteDateTime = date + \"T\" + \"23:59:59\"\n    console.log(LteDateTime)\n\tvar text = `\n<REQUEST>\n    <LOGIN authenticationkey=\"${openapiconsolekey}\"/>\n    <QUERY objecttype=\"TrainAnnouncement\" schemaversion=\"1.3\" orderby=\"AdvertisedTimeAtLocation\">\n        <FILTER>\n            <EQ name=\"AdvertisedTrainIdent\" value=\"${trainNo}\" />\n            <EQ name=\"Advertised\" value=\"true\"/>\n            <GTE name=\"AdvertisedTimeAtLocation\" value=\"${DateTime}\" />\n            <LTE name=\"AdvertisedTimeAtLocation\" value=\"${LteDateTime}\" />\n        </FILTER>\n        <INCLUDE>AdvertisedTrainIdent</INCLUDE>\n        <INCLUDE>LocationSignature</INCLUDE>\n        <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\n  </QUERY>\n</REQUEST>`\n    console.log(text)\nreturn text;\n}\n\n\nfunction st_message(LocationSignature) {\nconsole.log(LocationSignature);\n\tvar text = `\n<REQUEST>\n    <LOGIN authenticationkey=\"${openapiconsolekey}\"/>\n      <QUERY objecttype=\"TrainMessage\" schemaversion=\"1.3\">\n            <FILTER>\n                  <EQ name=\"AffectedLocation\" value=\"${LocationSignature}\" />\n            </FILTER>\n            <INCLUDE>ExternalDescription</INCLUDE>\n      </QUERY>\n</REQUEST>`\n    console.log(text)\nreturn text;\n}\n\nfunction createReport(input) {\n    var adTime=input.AdvertisedTimeAtLocation\n    var trainNo=input.AdvertisedTrainIdent.slice(0,-4)+\" \"+input.AdvertisedTrainIdent.slice(-4,-2)+\" \"+input.AdvertisedTrainIdent.slice(-2)\n    var track=input.TrackAtLocation\n    var begin=input.LocationSignature\n    var final=input.ToLocation[0].LocationName\n    var departureTime=adTime.slice(11,16)\n    if (track==\"x\"){\n        var text = `Train ${trainNo}, from ${stationName[begin]} to ${stationName[final]}, will departure at ${departureTime}, but the train is canceled.`\n    }\n    else {\n        var text = `Train ${trainNo}, from ${stationName[begin]} to ${stationName[final]}, will departure at ${departureTime}, from track ${track}.`\n        }\n    console.log(text)\n    return text\n}\n\nfunction createMoreReport(input) {\n    //console.log(input);\n    var trainNo=input[0].AdvertisedTrainIdent.slice(0,-4)+\" \"+input[0].AdvertisedTrainIdent.slice(-4,-2)+\" \"+input[0].AdvertisedTrainIdent.slice(-2)\n    var begin=input[0].LocationSignature\n    var begintime=input[0].AdvertisedTimeAtLocation.slice(11,16)\n    var final=input[input.length - 1].LocationSignature\n    var finaltime=input[input.length - 1].AdvertisedTimeAtLocation.slice(11,16)\n    var stations=\"\"    \n    for (const [key, value] of Object.entries(input)) {\n      //console.log(`${key}`);\n      if (key == 0){ continue }; \n      if (key % 2 == 0){ continue };\n      if (key == input.length-1){ continue };\n      stations = stations + \", \" + stationName[value.LocationSignature]\n    };\n    var text=`\n    The train ${trainNo}, will departure from ${stationName[begin]} at ${begintime}. Calling at${stations},\n    and finally arrive at ${stationName[final]} at ${finaltime}.\n    `\n    return text\n};\n\nfunction create_St_message(input, from) {\n    var text=`Announcement from ${stationName[from]} Station. \\n`;\n    for (const [key, value] of Object.entries(input)) {\n        text = text + `No.${Number(key)+1}: ${value.ExternalDescription.slice(0,50)} \\n`\n    }\n    console.log(text);\n    return text\n};\n\n//Trafikverket API\nconst proxyurl = \"\";\nconst rasaurl = 'https://api.trafikinfo.trafikverket.se/v2/data.json'\nconst tvRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n       // headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: text\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { departureMachine } from \"./dmDeparture\";\nimport { stationName } from './grammars/stationName';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    context: {count : 0},\n    states: {\n        dm: {\n          initial: 'init',\n          id: \"dm\",\n          states:{\n                        \n              init: {on: {CLICK: 'dmDeparture'}},\n              dmDeparture: {...departureMachine},\n          }\n\n\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            actions: assign((context) => { return { count: 0 } }),\n                            target:'idle'\n                        },\n                        //MAXSPEECH: 'idle',\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            },\n            clear_context: assign((context) => { return { from: undefined, to: undefined, time: undefined, date: undefined, order: undefined, result: undefined, output_text: undefined, temp: undefined } }),\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Start dialog...\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a input.');\n                listen({\n                    interimResults: false,\n                    continuous: true,\n                    lang: \"sv-SE\",\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda, lang: \"en-US\" });\n                  /*var u = new SpeechSynthesisUtterance();\n                  u.text = context.ttsAgenda;\n                  u.lang = 'sv-SE';\n                console.log(u)\n                speechSynthesis.speak(u);*/\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n\n        <div className=\"App\">\n            <h1>Train Info System</h1>\n            <ReactiveButton state={current} onClick={() => send('CLICK')} /><br/>\n            \n            <h3>Frame-Based Dialog:</h3>\n\n            <table>\n              <tr>\n                <th>FROM:</th>\n                <th>TO:</th>\n                <th>TIME:</th>\n                <th>DATE:</th>\n                <th>Train No:</th>\n                \n              </tr>\n              <tr>\n                <td>{stationName[current.context.from]} </td>\n                <td>{stationName[current.context.to]}</td>\n                <td>{current.context.time}</td>\n                <td>{current.context.date}</td>\n                <td>{current.context.temp}</td>\n              </tr>\n            </table>\n            <br/>    \n            <table>\n              <tr>\n                <th>TTS: (in English)</th>\n              </tr>\n              <tr>\n                <td>{current.context.ttsAgenda}</td>\n              </tr>\n            </table>\n            <br/>\n              <table>\n              <tr>\n                <th>ASR: (in Swedish)</th>\n              </tr>\n              <tr>\n                <td>{current.context.recResult}</td>\n              </tr>\n            </table>\n            <br/>\n            <table>\n              <tr>\n                <th>Output Text</th>\n              </tr>\n              <tr>\n                <td>{current.context.output_text}</td>\n              </tr>\n            </table>\n        </div>\n    )\n};\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n\n"],"sourceRoot":""}